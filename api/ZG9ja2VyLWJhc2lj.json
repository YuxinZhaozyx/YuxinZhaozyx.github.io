{"title":"Docker基础","date":"2019-10-02T18:09:05.000Z","link":"docker-basic","comments":true,"tags":["docker"],"categories":["tools"],"updated":"2022-01-04T08:35:48.567Z","content":"<p>本文讲述 docker 的基本概念和使用。 </p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"容器\">容器<a href=\"docker-basic#容器\"></a></h2><p>Docker 利用容器来运行应用。</p>\n<p>容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。</p>\n<p>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>\n<h3 id=\"用容器执行指令\">用容器执行指令<a href=\"docker-basic#用容器执行指令\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run ubuntu:15.10 /bin/echo \"hello world\"</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"进行交互式的容器\">进行交互式的容器<a href=\"docker-basic#进行交互式的容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -i -t ubuntu:15.10 /bin/bash</span><br><span class=\"line\">root@dc005c79503:/#</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-t</code> : 再新容器内指定一个伪终端或终端</li>\n<li><code>-i</code> : 允许你对容器内的标准输入进行交互</li>\n</ul>\n<p>可以通过运行exit命令或者使用CTRL+D来退出容器</p>\n<p>使用CTRL+P+Q可以退出容器但不关闭容器</p>\n<h3 id=\"后台启动容器\">后台启动容器<a href=\"docker-basic#后台启动容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d &lt;image&gt; &lt;command&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d ubuntu:15.10 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-d</code> : 让容器后台运行</li>\n</ul>\n<p>输出不会打印 “hello world” 而是容器的ID</p>\n<h3 id=\"容器命名\">容器命名<a href=\"docker-basic#容器命名\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -P --name container_name &lt;image&gt; &lt;command&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"将容器的端口映射到本机的端口上\">将容器的端口映射到本机的端口上<a href=\"docker-basic#将容器的端口映射到本机的端口上\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -P &lt;image&gt; &lt;command&gt;</span><br><span class=\"line\">docker run -d -p 8000:5000 &lt;image&gt; &lt;command&gt;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-d</code> : 让容器后台运行</li>\n<li><code>-P</code> : 将容器内部使用的网络端口映射到我们使用的主机上(随机)</li>\n<li><code>-p</code> : 将容器内部使用的端口映射到我们使用 的主机上(将容器内的5000端口映射到本地主机的8000端口上)</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 192.168.99.100:8000:5000/udp &lt;image&gt; &lt;command&gt; # 指定host和port</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"查看所有的容器\">查看所有的容器<a href=\"docker-basic#查看所有的容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps     # 查看正在允许的容器</span><br><span class=\"line\">docker ps -a  # 查看所有容器</span><br><span class=\"line\">docker ps -l  # 查看最后一次创建的容器</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"查看容器输出\">查看容器输出<a href=\"docker-basic#查看容器输出\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs &lt;name/id&gt;</span><br><span class=\"line\">docker logs -f &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-f</code> : 让 docker logs 在输出后不是直接退出，而是一直接收该容器的输出</li>\n</ul>\n<h3 id=\"查看容器内部运行的进程\">查看容器内部运行的进程<a href=\"docker-basic#查看容器内部运行的进程\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"查看容器的配置和状态信息\">查看容器的配置和状态信息<a href=\"docker-basic#查看容器的配置和状态信息\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"查看网络端口\">查看网络端口<a href=\"docker-basic#查看网络端口\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker port &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"停止容器\">停止容器<a href=\"docker-basic#停止容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"重启容器\">重启容器<a href=\"docker-basic#重启容器\"></a></h3><p>将已经停止的容器再启动</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>将一个运行态的容器终止再重新启动启动</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"移除容器\">移除容器<a href=\"docker-basic#移除容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>:warning: 移除容器时，该容器必须是停止状态，否则会报错</p>\n<h3 id=\"在运行的容器中执行命令\">在运行的容器中执行命令<a href=\"docker-basic#在运行的容器中执行命令\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -d -i -t &lt;container name/id&gt; &lt;command&gt;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-d</code> : 在后台运行</li>\n<li><code>-t</code> : 分配一个伪终端(pseudo-tty)并绑定到容器的stdin上</li>\n<li><code>-i</code> : 保持容器的stdin打开</li>\n</ul>\n<h3 id=\"进入容器\">进入容器<a href=\"docker-basic#进入容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach &lt;container&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -i -t --name my_python python</span><br><span class=\"line\">docker attach my_python</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; <span class=\"built_in\">print</span>(<span class=\"string\">\"hello\"</span>)</span></span><br></pre></td></tr></table></div></figure>\n\n<p>但是使用 <code>attach</code> 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p>\n<h3 id=\"导出容器\">导出容器<a href=\"docker-basic#导出容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker export -o &lt;output_file_name&gt; &lt;container name/id&gt;</span><br><span class=\"line\">docker export &lt;container name/id&gt; &gt; &lt;output_file_name&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker export my_python &gt; my_python.tar</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"导入容器为镜像\">导入容器为镜像<a href=\"docker-basic#导入容器为镜像\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import &lt;input_file&gt; &lt;new container name&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker import my_python.tar new-python:dev</span><br><span class=\"line\">docker mport http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></div></figure>\n\n<p>用户既可以使用 <code>docker load</code> 来导入镜像存储文件到本地镜像库，也可以使用 <code>docker import</code> 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>\n<h2 id=\"镜像\">镜像<a href=\"docker-basic#镜像\"></a></h2><p>Docker 镜像就是一个只读的模板。</p>\n<p>Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。</p>\n<h3 id=\"列出镜像列表\">列出镜像列表<a href=\"docker-basic#列出镜像列表\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"查找镜像\">查找镜像<a href=\"docker-basic#查找镜像\"></a></h3><p>可以再 Docker Hub 网站上查找也可以用命令行查找</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search &lt;image&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"拖取镜像\">拖取镜像<a href=\"docker-basic#拖取镜像\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull &lt;image&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"修改-更新镜像\">修改/更新镜像<a href=\"docker-basic#修改-更新镜像\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i ubuntu:14.01 /bin/bash</span><br><span class=\"line\">root@&lt;container id&gt;:/#</span><br></pre></td></tr></table></div></figure>\n\n<p>即可使用容器内的shell镜像操作，容器的内容会因此发生变化，需要提交容器的副本</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m=\"has update\" -a=\"my name\" &lt;container id&gt; myname/ubuntu:v2</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-m</code> : 提交的描述信息</li>\n<li><code>-a</code> : 指定镜像作者</li>\n<li><code>&lt;container id&gt;</code>: 容器ID</li>\n<li><code>myname/ubuntu:v2</code> : 指定要创建的目标镜像名, 其中 <code>v2</code> 为tag</li>\n</ul>\n<p>使用这个新的镜像启动容器</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i myname/ubuntu:v2 /bin/bash</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"Dockerfile-构建镜像\">Dockerfile 构建镜像<a href=\"docker-basic#Dockerfile-构建镜像\"></a></h3><p>从零开始创建一个新的 Docker 镜像，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span>    centos:<span class=\"number\">6.7</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span>  my name <span class=\"string\">\"my@mail.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">     /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'root:123456'</span> |chpasswd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">     useradd myname</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">     /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'myname:123456'</span> |chpasswd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">     /bin/<span class=\"built_in\">echo</span> -e <span class=\"string\">\"LANG=\\\"en_US.UTF-8\\\"\"</span> &gt;/etc/default/<span class=\"built_in\">local</span></span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\">\t\tmyAPP  /var/www</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span>  <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span>  <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\">     /usr/sbin/sshd -D</span></span><br></pre></td></tr></table></div></figure>\n\n<p>每一个指令都会在镜像上创建一个新的层，:warning: 一个镜像不能超过127层，每一个指令的前缀都必须是大写的。</p>\n<ul>\n<li><code>FROM</code> : 指定使用哪个镜像作为基础</li>\n<li><code>RUN</code> : 指令会在创建中运行，可以用来安装些环境</li>\n<li><code>ADD</code> : 复制本地文件到镜像（此处的myAPP是本地的一个文件夹）</li>\n<li><code>EXPOSE</code> : 向外部开放端口</li>\n<li><code>CMD</code> : 描述容器启动后运行的指令</li>\n</ul>\n<p><strong>构建镜像</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t myname/centos:6.7 .</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-t</code> : 指定要创建的目标镜像名和tag</li>\n<li><code>.</code> : Dockerfile文件所在目录，这里是当前目录</li>\n</ul>\n<h3 id=\"设置镜像标签\">设置镜像标签<a href=\"docker-basic#设置镜像标签\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag &lt;image id&gt; &lt;image name: tag&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag 860c279d2fec myname/centos:dev</span><br><span class=\"line\">docker images</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPOSITORY       TAG    IMAGE ID        CREATED        SIZE</span><br><span class=\"line\">runoob/centos    6.7    860c279d2fec    5 hours ago    190.6 MB</span><br><span class=\"line\">runoob/centos    dev    860c279d2fec    5 hours ago    190.6 MB</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"导出镜像到本地\">导出镜像到本地<a href=\"docker-basic#导出镜像到本地\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o &lt;output_file_name&gt; &lt;image&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker save -o python_from_docker.tar python:latest</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"从本地载入镜像\">从本地载入镜像<a href=\"docker-basic#从本地载入镜像\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load --input &lt;input_file_name&gt;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 或</span></span><br><span class=\"line\">docker load &lt; &lt;input_file_name&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker load --input python_from_docker.tar</span><br><span class=\"line\">docker load &lt; python_from_docker.tar</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"移除镜像\">移除镜像<a href=\"docker-basic#移除镜像\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi &lt;image&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi python:lastest</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"仓库\">仓库<a href=\"docker-basic#仓库\"></a></h2><p>仓库（Repository）是集中存放镜像的地方。</p>\n<p>一个容易混淆的概念是注册服务器（Registry）。实际上注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 <code>dl.dockerpool.com/ubuntu</code> 来说，<code>dl.dockerpool.com</code> 是注册服务器地址，<code>ubuntu</code> 是仓库名。</p>\n<h3 id=\"Docker-Hub\">Docker Hub<a href=\"docker-basic#Docker-Hub\"></a></h3><p>目前 Docker 官方维护了一个公共仓库 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>，其中已经包括了超过 15,000 的镜像。大部分需求，都可以通过在 Docker Hub 中直接下载镜像来实现。</p>\n<h4 id=\"登录\">登录<a href=\"docker-basic#登录\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br><span class=\"line\">Username: your_docker_hub_user_name</span><br><span class=\"line\">Password: your_docker_hub_password</span><br></pre></td></tr></table></div></figure>\n\n<p>注册成功后，本地用户目录的 <code>.dockercfg</code> 中将保存用户的认证信息。</p>\n<h4 id=\"搜索镜像\">搜索镜像<a href=\"docker-basic#搜索镜像\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search &lt;image&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"拉取镜像\">拉取镜像<a href=\"docker-basic#拉取镜像\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull &lt;image&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"推送镜像到Docker-Hub\">推送镜像到Docker Hub<a href=\"docker-basic#推送镜像到Docker-Hub\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push &lt;image&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"自动创建\">自动创建<a href=\"docker-basic#自动创建\"></a></h4><p>自动创建（Automated Builds）功能对于需要经常升级镜像内程序来说，十分方便。 有时候，用户创建了镜像，安装了某个软件，如果软件发布新版本则需要手动更新镜像。。</p>\n<p>而自动创建允许用户通过 Docker Hub 指定跟踪一个目标网站（目前支持 GitHub 或 BitBucket）上的项目，一旦项目发生新的提交，则自动执行创建。</p>\n<p>要配置自动创建，包括如下的步骤：</p>\n<ul>\n<li>创建并登录 Docker Hub，以及目标网站；</li>\n<li>在目标网站中连接帐户到 Docker Hub；</li>\n<li>在 Docker Hub 中 <a href=\"https://registry.hub.docker.com/builds/add/\" target=\"_blank\" rel=\"noopener\">配置一个自动创建</a>；</li>\n<li>选取一个目标网站中的项目（需要含 Dockerfile）和分支；</li>\n<li>指定 Dockerfile 的位置，并提交创建。</li>\n</ul>\n<p>之后，可以 在Docker Hub 的自动创建页面中跟踪每次创建的状态。</p>\n<h3 id=\"私有仓库\">私有仓库<a href=\"docker-basic#私有仓库\"></a></h3><p><code>docker-registry</code> 是官方提供的工具，可以用于构建私有的镜像仓库。</p>\n<h4 id=\"容器安装docker-registry\">容器安装docker-registry<a href=\"docker-basic#容器安装docker-registry\"></a></h4><p>在安装了 Docker 后，可以通过获取官方 registry 镜像来运行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 registry</span><br></pre></td></tr></table></div></figure>\n\n<p>这将使用官方的 registry 镜像来启动本地的私有仓库。 用户可以通过指定参数来配置私有仓库位置，例如配置镜像存储到 Amazon S3 服务。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">    -e SETTINGS_FLAVOR=s3 \\</span><br><span class=\"line\">    -e AWS_BUCKET=acme-docker \\</span><br><span class=\"line\">    -e STORAGE_PATH=/registry \\</span><br><span class=\"line\">    -e AWS_KEY=AKIAHSHB43HS3J92MXZ \\</span><br><span class=\"line\">    -e AWS_SECRET=xdDowwlK7TJajV1Y7EoOZrmuPEJlHYcNP2k4j49T \\</span><br><span class=\"line\">    -e SEARCH_BACKEND=sqlalchemy \\</span><br><span class=\"line\">    -p 5000:5000 \\</span><br><span class=\"line\">    registry</span><br></pre></td></tr></table></div></figure>\n\n<p>此外，还可以指定本地路径（如 <code>/home/user/registry-conf</code> ）下的配置文件。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 -v /home/user/registry-conf:/registry-conf -e DOCKER_REGISTRY_CONFIG=/registry-conf/config.yml registry</span><br></pre></td></tr></table></div></figure>\n\n<p>默认情况下，仓库会被创建在容器的 <code>/tmp/registry</code> 下。可以通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径。 例如下面的例子将上传的镜像放到 <code>/opt/data/registry</code> 目录。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"本地安装docker-registry\">本地安装docker-registry<a href=\"docker-basic#本地安装docker-registry\"></a></h4><p>对于 Ubuntu 或 CentOS 等发行版，可以直接通过源安装。</p>\n<ul>\n<li>Ubuntu</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y build-essential python-dev libevent-dev python-pip liblzma-dev</span><br><span class=\"line\">$ sudo pip install docker-registry</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>CentOS</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install -y python-devel libevent-devel python-pip gcc xz-devel</span><br><span class=\"line\">$ sudo python-pip install docker-registry</span><br></pre></td></tr></table></div></figure>\n\n<p>也可以从 <a href=\"https://github.com/docker/docker-registry\" target=\"_blank\" rel=\"noopener\">docker-registry</a> 项目下载源码进行安装。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install build-essential python-dev libevent-dev python-pip libssl-dev liblzma-dev libffi-dev</span><br><span class=\"line\">$ git clone https://github.com/docker/docker-registry.git</span><br><span class=\"line\">$ cd docker-registry</span><br><span class=\"line\">$ sudo python setup.py install</span><br></pre></td></tr></table></div></figure>\n\n<p>然后修改配置文件，主要修改 dev 模板段的 <code>storage_path</code> 到本地的存储仓库的路径。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cp config/config_sample.yml config/config.yml</span><br></pre></td></tr></table></div></figure>\n\n<p>之后启动 Web 服务。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gunicorn -c contrib/gunicorn.py docker_registry.wsgi:application</span><br></pre></td></tr></table></div></figure>\n\n<p>或者</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gunicorn --access-logfile - --error-logfile - -k gevent -b 0.0.0.0:5000 -w 4 --max-requests 100 docker_registry.wsgi:application</span><br></pre></td></tr></table></div></figure>\n\n<p>此时使用 curl 访问本地的 5000 端口，看到输出 docker-registry 的版本信息说明运行成功。</p>\n<blockquote>\n<p>注：<code>config/config_sample.yml</code> 文件是示例配置文件。</p>\n</blockquote>\n<h4 id=\"在私有仓库上传、下载、搜索镜像\">在私有仓库上传、下载、搜索镜像<a href=\"docker-basic#在私有仓库上传、下载、搜索镜像\"></a></h4><p>创建好私有仓库之后，就可以使用 <code>docker tag</code> 来标记一个镜像，然后推送它到仓库，别的机器上就可以下载下来了。例如私有仓库地址为 <code>192.168.7.26:5000</code>。</p>\n<p>先在本机查看已有的镜像。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">REPOSITORY      TAG        IMAGE ID         CREATED            VIRTUAL SIZE</span><br><span class=\"line\">ubuntu          latest     ba5877dc9bec     6 weeks ago        192.7 MB</span><br><span class=\"line\">ubuntu          14.04      ba5877dc9bec     6 weeks ago        192.7 MB</span><br></pre></td></tr></table></div></figure>\n\n<p>使用<code>docker tag</code> 将 <code>ba58</code> 这个镜像标记为 <code>192.168.7.26:5000/test</code>（格式为 <code>docker tag IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</code>）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag ba58 192.168.7.26:5000/test</span><br><span class=\"line\">root ~ # docker images</span><br><span class=\"line\">REPOSITORY               TAG        IMAGE ID        CREATED        VIRTUAL SIZE</span><br><span class=\"line\">ubuntu                   14.04      ba5877dc9bec    6 weeks ago    192.7 MB</span><br><span class=\"line\">ubuntu                   latest     ba5877dc9bec    6 weeks ago    192.7 MB</span><br><span class=\"line\">192.168.7.26:5000/test   latest     ba5877dc9bec    6 weeks ago    192.7 MB</span><br></pre></td></tr></table></div></figure>\n\n<p>使用 <code>docker push</code> 上传标记的镜像。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push 192.168.7.26:5000/test</span><br><span class=\"line\">The push refers to a repository [192.168.7.26:5000/test] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository 192.168.7.26:5000/test (1 tags)</span><br><span class=\"line\">Image 511136ea3c5a already pushed, skipping</span><br><span class=\"line\">Image 9bad880da3d2 already pushed, skipping</span><br><span class=\"line\">Image 25f11f5fb0cb already pushed, skipping</span><br><span class=\"line\">Image ebc34468f71d already pushed, skipping</span><br><span class=\"line\">Image 2318d26665ef already pushed, skipping</span><br><span class=\"line\">Image ba5877dc9bec already pushed, skipping</span><br><span class=\"line\">Pushing tag for rev [ba5877dc9bec] on &#123;http://192.168.7.26:5000/v1/repositories/test/tags/latest&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>用 curl 查看仓库中的镜像。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://192.168.7.26:5000/v1/search</span><br><span class=\"line\">&#123;&quot;num_results&quot;: 7, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/miaxis_j2ee&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/tomcat&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/ubuntu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/ubuntu_office&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/desktop_ubu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;dockerfile/ubuntu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/test&quot;&#125;]&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这里可以看到 <code>{&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/test&quot;}</code>，表明镜像已经被成功上传了。</p>\n<p>现在可以到另外一台机器去下载这个镜像。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 192.168.7.26:5000/test</span><br><span class=\"line\">Pulling repository 192.168.7.26:5000/test</span><br><span class=\"line\">ba5877dc9bec: Download complete</span><br><span class=\"line\">511136ea3c5a: Download complete</span><br><span class=\"line\">9bad880da3d2: Download complete</span><br><span class=\"line\">25f11f5fb0cb: Download complete</span><br><span class=\"line\">ebc34468f71d: Download complete</span><br><span class=\"line\">2318d26665ef: Download complete</span><br><span class=\"line\">$ sudo docker images</span><br><span class=\"line\">REPOSITORY                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class=\"line\">192.168.7.26:5000/test             latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></div></figure>\n\n<p>可以使用 <a href=\"https://github.com/yeasy/docker_practice/raw/master/_local/push_images.sh\" target=\"_blank\" rel=\"noopener\">这个脚本</a> 批量上传本地的镜像到注册服务器中，默认是本地注册服务器 <code>127.0.0.1:5000</code>。例如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/yeasy/docker_practice/raw/master/_local/push_images.sh; sudo chmod a+x push_images.sh</span><br><span class=\"line\">$ ./push_images.sh ubuntu:latest centos:centos7</span><br><span class=\"line\">The registry server is 127.0.0.1</span><br><span class=\"line\">Uploading ubuntu:latest...</span><br><span class=\"line\">The push refers to a repository [127.0.0.1:5000/ubuntu] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository 127.0.0.1:5000/ubuntu (1 tags)</span><br><span class=\"line\">Image 511136ea3c5a already pushed, skipping</span><br><span class=\"line\">Image bfb8b5a2ad34 already pushed, skipping</span><br><span class=\"line\">Image c1f3bdbd8355 already pushed, skipping</span><br><span class=\"line\">Image 897578f527ae already pushed, skipping</span><br><span class=\"line\">Image 9387bcc9826e already pushed, skipping</span><br><span class=\"line\">Image 809ed259f845 already pushed, skipping</span><br><span class=\"line\">Image 96864a7d2df3 already pushed, skipping</span><br><span class=\"line\">Pushing tag for rev [96864a7d2df3] on &#123;http://127.0.0.1:5000/v1/repositories/ubuntu/tags/latest&#125;</span><br><span class=\"line\">Untagged: 127.0.0.1:5000/ubuntu:latest</span><br><span class=\"line\">Done</span><br><span class=\"line\">Uploading centos:centos7...</span><br><span class=\"line\">The push refers to a repository [127.0.0.1:5000/centos] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository 127.0.0.1:5000/centos (1 tags)</span><br><span class=\"line\">Image 511136ea3c5a already pushed, skipping</span><br><span class=\"line\">34e94e67e63a: Image successfully pushed</span><br><span class=\"line\">70214e5d0a90: Image successfully pushed</span><br><span class=\"line\">Pushing tag for rev [70214e5d0a90] on &#123;http://127.0.0.1:5000/v1/repositories/centos/tags/centos7&#125;</span><br><span class=\"line\">Untagged: 127.0.0.1:5000/centos:centos7</span><br><span class=\"line\">Done</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"仓库配置文件\">仓库配置文件<a href=\"docker-basic#仓库配置文件\"></a></h3><p>Docker 的 Registry 利用配置文件提供了一些仓库的模板（flavor），用户可以直接使用它们来进行开发或生产部署。</p>\n<h4 id=\"模板\">模板<a href=\"docker-basic#模板\"></a></h4><p>在 <code>config_sample.yml</code> 文件中，可以看到一些现成的模板段：</p>\n<ul>\n<li><code>common</code>：基础配置</li>\n<li><code>local</code>：存储数据到本地文件系统</li>\n<li><code>s3</code>：存储数据到 AWS S3 中</li>\n<li><code>dev</code>：使用 <code>local</code> 模板的基本配置</li>\n<li><code>test</code>：单元测试使用</li>\n<li><code>prod</code>：生产环境配置（基本上跟s3配置类似）</li>\n<li><code>gcs</code>：存储数据到 Google 的云存储</li>\n<li><code>swift</code>：存储数据到 OpenStack Swift 服务</li>\n<li><code>glance</code>：存储数据到 OpenStack Glance 服务，本地文件系统为后备</li>\n<li><code>glance-swift</code>：存储数据到 OpenStack Glance 服务，Swift 为后备</li>\n<li><code>elliptics</code>：存储数据到 Elliptics key/value 存储</li>\n</ul>\n<p>用户也可以添加自定义的模版段。</p>\n<p>默认情况下使用的模板是 <code>dev</code>，要使用某个模板作为默认值，可以添加 <code>SETTINGS_FLAVOR</code> 到环境变量中，例如</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export SETTINGS_FLAVOR=dev</span><br></pre></td></tr></table></div></figure>\n\n<p>另外，配置文件中支持从环境变量中加载值，语法格式为 <code>_env:VARIABLENAME[:DEFAULT]</code>。</p>\n<h4 id=\"示例配置\">示例配置<a href=\"docker-basic#示例配置\"></a></h4><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">common:</span><br><span class=\"line\">    loglevel: info</span><br><span class=\"line\">    search_backend: \"_env:SEARCH_BACKEND:\"</span><br><span class=\"line\">    sqlalchemy_index_database:</span><br><span class=\"line\">        \"_env:SQLALCHEMY_INDEX_DATABASE:sqlite:////tmp/docker-registry.db\"</span><br><span class=\"line\"></span><br><span class=\"line\">prod:</span><br><span class=\"line\">    loglevel: warn</span><br><span class=\"line\">    storage: s3</span><br><span class=\"line\">    s3_access_key: _env:AWS_S3_ACCESS_KEY</span><br><span class=\"line\">    s3_secret_key: _env:AWS_S3_SECRET_KEY</span><br><span class=\"line\">    s3_bucket: _env:AWS_S3_BUCKET</span><br><span class=\"line\">    boto_bucket: _env:AWS_S3_BUCKET</span><br><span class=\"line\">    storage_path: /srv/docker</span><br><span class=\"line\">    smtp_host: localhost</span><br><span class=\"line\">    from_addr: docker@myself.com</span><br><span class=\"line\">    to_addr: my@myself.com</span><br><span class=\"line\"></span><br><span class=\"line\">dev:</span><br><span class=\"line\">    loglevel: debug</span><br><span class=\"line\">    storage: local</span><br><span class=\"line\">    storage_path: /home/myself/docker</span><br><span class=\"line\"></span><br><span class=\"line\">test:</span><br><span class=\"line\">    storage: local</span><br><span class=\"line\">    storage_path: /tmp/tmpdockertmp</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"数据卷-数据管理\">数据卷 /数据管理<a href=\"docker-basic#数据卷-数据管理\"></a></h2><p>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>\n<ul>\n<li>数据卷可以在容器之间共享和重用</li>\n<li>对数据卷的修改会立马生效</li>\n<li>对数据卷的更新，不会影响镜像</li>\n<li>卷会一直存在，直到没有容器使用。数据卷的使用，类似于 Linux 下对目录或文件进行 mount</li>\n</ul>\n<h3 id=\"创建数据卷\">创建数据卷<a href=\"docker-basic#创建数据卷\"></a></h3><p>在用 <code>docker run</code> 命令的时候，使用 <code>-v</code> 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。</p>\n<p>下面创建一个 web 容器，并加载一个数据卷到容器的 <code>/webapp</code> 目录。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -P --name web -v /webapp training/webapp python app.py</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-v</code> : 创建数据卷或挂载文件夹/文件到容器中</li>\n</ul>\n<blockquote>\n<p> 注意：也可以在 Dockerfile 中使用 <code>VOLUME</code> 来添加一个或者多个新的卷到由该镜像创建的任意容器。</p>\n</blockquote>\n<h3 id=\"挂在一个主机目录作为数据卷\">挂在一个主机目录作为数据卷<a href=\"docker-basic#挂在一个主机目录作为数据卷\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的命令加载主机的 <code>/src/webapp</code> 目录到 <code>/opt/webapp</code> 目录。 这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它。</p>\n<blockquote>\n<p>注意：Dockerfile 中不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的。然而，不同操作系统的路径格式不一样，所以目前还不能支持。</p>\n</blockquote>\n<p>Docker 挂载数据卷的默认权限是读写，用户也可以通过 <code>:ro</code> 指定为只读。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run -d -P --name web -v /src/webapp:/opt/webapp:ro</span></span><br><span class=\"line\">training/webapp python app.py</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"挂载一个本地主机文件作为数据卷\">挂载一个本地主机文件作为数据卷<a href=\"docker-basic#挂载一个本地主机文件作为数据卷\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -i -t -v ~/.bash_history:/.bash_history ubuntu /bin/bash</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"数据卷容器-容器间共享持续更新的数据\">数据卷容器 / 容器间共享持续更新的数据<a href=\"docker-basic#数据卷容器-容器间共享持续更新的数据\"></a></h3><p>创建一个命名的数据卷容器 dbdata。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v /dbdata --name dbdata &lt;container&gt; &lt;command&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -v /dbdata --name dbdata training/postgres echo Data-only container for postgres</span><br></pre></td></tr></table></div></figure>\n\n<p>在其他容器中使用 <code>--volumes-from</code> 来挂载 dbdata 容器中的数据卷。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --volumes-from dbdata --name db1 training/postgres</span><br><span class=\"line\">docker run -d --volumes-from dbdata --name db2 training/postgres</span><br></pre></td></tr></table></div></figure>\n\n<p>还可以使用多个 <code>--volumes-from</code> 参数来从多个容器挂载多个数据卷。 也可以从其他已经挂载了数据卷的容器来挂载数据卷。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name db3 --volumes-from db1 training/postgres</span><br></pre></td></tr></table></div></figure>\n\n<p>:warning: 使用 <code>--volumes-from</code> 参数所挂载数据卷的容器自己并不需要保持在运行状态。</p>\n<p>:warning: 如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 <code>docker rm -v</code> 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。</p>\n<h3 id=\"数据卷备份\">数据卷备份<a href=\"docker-basic#数据卷备份\"></a></h3><p>首先使用 <code>--volumes-from</code> 标记来创建一个加载 dbdata 容器卷的容器，并从本地主机挂载当前到容器的 /backup 目录。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata</span><br></pre></td></tr></table></div></figure>\n\n<p>容器启动后，使用了 <code>tar</code> 命令来将 dbdata 卷备份为本地的 <code>/backup/backup.tar</code>。</p>\n<h3 id=\"数据卷恢复\">数据卷恢复<a href=\"docker-basic#数据卷恢复\"></a></h3><p>如果要恢复数据到一个容器，首先创建一个带有数据卷的容器 dbdata2。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</span><br></pre></td></tr></table></div></figure>\n\n<p>然后创建另一个容器，挂载 dbdata2 的容器，并使用 <code>untar</code> 解压备份文件到挂载的容器卷中。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf</span><br><span class=\"line\">/backup/backup.tar</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"容器网络\">容器网络<a href=\"docker-basic#容器网络\"></a></h2><h3 id=\"容器互联\">容器互联<a href=\"docker-basic#容器互联\"></a></h3><p>使用 <code>--link</code> 参数可以让容器之间安全的进行交互。</p>\n<p>创建一个数据库容器。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name db training/postgres</span><br></pre></td></tr></table></div></figure>\n\n<p>然后创建一个 web 容器，并将它连接到 db 容器</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -P --name web --link db:db training/webapp python app.py</span><br></pre></td></tr></table></div></figure>\n\n<p>此时，db 容器和 web 容器建立互联关系。</p>\n<p><code>--link</code> 参数的格式为 <code>--link name:alias</code>，其中 <code>name</code> 是要链接的容器的名称，<code>alias</code> 是这个连接的别名。</p>\n<p>使用 <code>docker ps</code> 来查看容器的连接</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br><span class=\"line\">IMAGE                     ...  PORTS                    NAMES</span><br><span class=\"line\">training/postgres:latest  ...  5432/tcp                 db, web/db</span><br><span class=\"line\">training/webapp:latest    ...  0.0.0.0:49154-&gt;5000/tcp  web</span><br></pre></td></tr></table></div></figure>\n\n<p>可以看到自定义命名的容器，db 和 web，db 容器的 names 列有 db 也有 web/db。这表示 web 容器链接到 db 容器，web 容器将被允许访问 db 容器的信息。</p>\n<p>Docker 在两个互联的容器之间创建了一个安全隧道，而且不用映射它们的端口到宿主主机上。在启动 db 容器的时候并没有使用 <code>-p</code> 和 <code>-P</code> 标记，从而避免了暴露数据库端口到外部网络上。</p>\n<p>Docker 通过 2 种方式为容器公开连接信息：</p>\n<ul>\n<li>环境变量</li>\n<li>更新 <code>/etc/hosts</code> 文件</li>\n</ul>\n<p>使用 <code>env</code> 命令来查看 web 容器的环境变量</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm --name web2 --link db:db training/webapp env</span><br><span class=\"line\">. . .</span><br><span class=\"line\">DB_NAME=/web2/db</span><br><span class=\"line\">DB_PORT=tcp://172.17.0.5:5432</span><br><span class=\"line\">DB_PORT_5000_TCP=tcp://172.17.0.5:5432</span><br><span class=\"line\">DB_PORT_5000_TCP_PROTO=tcp</span><br><span class=\"line\">DB_PORT_5000_TCP_PORT=5432</span><br><span class=\"line\">DB_PORT_5000_TCP_ADDR=172.17.0.5</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></div></figure>\n\n<p>其中 DB_ 开头的环境变量是供 web 容器连接 db 容器使用，前缀采用大写的连接别名。</p>\n<p>除了环境变量，Docker 还添加 host 信息到父容器的 <code>/etc/hosts</code> 的文件。下面是父容器 web 的 hosts 文件</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i --rm --link db:db training/webapp /bin/bash</span><br><span class=\"line\">root@aed84ee21bde:/opt/webapp# cat /etc/hosts</span><br><span class=\"line\">172.17.0.7  aed84ee21bde</span><br><span class=\"line\">. . .</span><br><span class=\"line\">172.17.0.5  db</span><br></pre></td></tr></table></div></figure>\n\n<p>这里有 2 个 hosts，第一个是 web 容器，web 容器用 id 作为他的主机名，第二个是 db 容器的 ip 和主机名。 可以在 web 容器中安装 ping 命令来测试跟db容器的连通。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@aed84ee21bde:/opt/webapp# apt-get install -yqq inetutils-ping</span><br><span class=\"line\">root@aed84ee21bde:/opt/webapp# ping db</span><br><span class=\"line\">PING db (172.17.0.5): 48 data bytes</span><br><span class=\"line\">56 bytes from 172.17.0.5: icmp_seq=0 ttl=64 time=0.267 ms</span><br><span class=\"line\">56 bytes from 172.17.0.5: icmp_seq=1 ttl=64 time=0.250 ms</span><br><span class=\"line\">56 bytes from 172.17.0.5: icmp_seq=2 ttl=64 time=0.256 ms</span><br></pre></td></tr></table></div></figure>\n\n<p>用 ping 来测试db容器，它会解析成 <code>172.17.0.5</code>。</p>\n<h2 id=\"Dockerfile\">Dockerfile<a href=\"docker-basic#Dockerfile\"></a></h2><h3 id=\"基本结构\">基本结构<a href=\"docker-basic#基本结构\"></a></h3><p>Dockerfile 由一行行命令语句组成，并且支持以 <code>#</code> 开头的注释行。</p>\n<p>一般的，Dockerfile 分为四部分：</p>\n<ul>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作指令</li>\n<li>容器启动时执行指令</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Nginx</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span>      ubuntu</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Victor Vieux &lt;victor@docker.com&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y inotify-tools nginx apache2 openssh-server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Firefox over VNC</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install vnc, xvfb in order to create a 'fake' display and firefox</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> apt-get update &amp;&amp; apt-get install -y x11vnc xvfb firefox</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> mkdir /.vnc</span></span><br><span class=\"line\"><span class=\"comment\"># Setup a password</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> x11vnc -storepasswd 1234 ~/.vnc/passwd</span></span><br><span class=\"line\"><span class=\"comment\"># Autostart firefox (might not be the best way, but it does the trick)</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> bash -c <span class=\"string\">'echo \"firefox\" &gt;&gt; /.bashrc'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">5900</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\">    [<span class=\"string\">\"x11vnc\"</span>, <span class=\"string\">\"-forever\"</span>, <span class=\"string\">\"-usepw\"</span>, <span class=\"string\">\"-create\"</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Multiple images example</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># VERSION               0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> foo &gt; bar</span></span><br><span class=\"line\"><span class=\"comment\"># Will output something like ===&gt; 907ad6c2736f</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> moo &gt; oink</span></span><br><span class=\"line\"><span class=\"comment\"># Will output something like ===&gt; 695d7793cbe4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You᾿ll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with</span></span><br><span class=\"line\"><span class=\"comment\"># /oink.</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"指令\">指令<a href=\"docker-basic#指令\"></a></h3><h4 id=\"FROM\">FROM<a href=\"docker-basic#FROM\"></a></h4><p>格式为 </p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> &lt;image&gt;</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></div></figure>\n\n<p>第一条指令必须为 <code>FROM</code> 指令。并且，如果在同一个Dockerfile中创建多个镜像时，可以使用多个 <code>FROM</code> 指令（每个镜像一次）。</p>\n<h4 id=\"MAINTAINER\">MAINTAINER<a href=\"docker-basic#MAINTAINER\"></a></h4><p>格式为 <code>MAINTAINER &lt;name&gt;</code>，指定维护者信息。</p>\n<h4 id=\"RUN\">RUN<a href=\"docker-basic#RUN\"></a></h4><p>格式有两种</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> &lt;<span class=\"built_in\">command</span>&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> [<span class=\"string\">\"executable\"</span>, <span class=\"string\">\"param1\"</span>, <span class=\"string\">\"param2\"</span>]`</span></span><br></pre></td></tr></table></div></figure>\n\n<p>:warning: 前者将在 shell 终端中运行命令，即 <code>/bin/sh -c</code>；后者则使用 <code>exec</code> 执行。指定使用其它终端可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code>。</p>\n<p><strong>每条 <code>RUN</code> 指令将在当前镜像基础上执行指定命令</strong>，并提交为新的镜像。当命令较长时可以使用 <code>\\</code> 来换行。</p>\n<h4 id=\"CMD\">CMD<a href=\"docker-basic#CMD\"></a></h4><p><strong>指定启动容器时执行的命令</strong>，:warning: 每个 Dockerfile 只能有一条 <code>CMD</code> 命令。如果指定了多条命令，只有最后一条会被执行。</p>\n<p>如果用户启动容器时候指定了运行的命令，则会覆盖掉 <code>CMD</code> 指定的命令。</p>\n<p><strong>支持三种格式</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"executable\"</span>,<span class=\"string\">\"param1\"</span>,<span class=\"string\">\"param2\"</span>] <span class=\"comment\"># 使用 exec 执行，推荐方式</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> <span class=\"built_in\">command</span> param1 param2 <span class=\"comment\"># 在 /bin/sh 中执行，提供给需要交互的应用</span></span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"param1\"</span>,<span class=\"string\">\"param2\"</span>] <span class=\"comment\"># 提供给 ENTRYPOINT 的默认参数</span></span></span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"EXPOSE\">EXPOSE<a href=\"docker-basic#EXPOSE\"></a></h4><p>格式为 <code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>。</p>\n<p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 <code>-P</code>，Docker 主机会自动分配一个端口转发到指定的端口。</p>\n<h4 id=\"ENV\">ENV<a href=\"docker-basic#ENV\"></a></h4><p>格式为 <code>ENV &lt;key&gt; &lt;value&gt;</code>。 指定一个环境变量，会被后续 <code>RUN</code> 指令使用，并在容器运行时保持。</p>\n<p>例如</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENV</span> PG_MAJOR <span class=\"number\">9.3</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PG_VERSION <span class=\"number\">9.3</span>.<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> curl -SL http://example.com/postgres-<span class=\"variable\">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PATH /usr/local/postgres-MATHJAX-SSR-<span class=\"number\">1739</span>PATH</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"ADD\">ADD<a href=\"docker-basic#ADD\"></a></h4><p>格式为 <code>ADD &lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>该命令将复制指定的 <code>&lt;src&gt;</code> 到容器中的 <code>&lt;dest&gt;</code>。 其中 <code>&lt;src&gt;</code> 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）</p>\n<h4 id=\"COPY\">COPY<a href=\"docker-basic#COPY\"></a></h4><p>格式为 <code>COPY &lt;src&gt; &lt;dest&gt;</code>。</p>\n<p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径）到容器中的 <code>&lt;dest&gt;</code>。</p>\n<p>当使用本地目录为源目录时，推荐使用 <code>COPY</code>。</p>\n<h4 id=\"ENTRYPOINT\">ENTRYPOINT<a href=\"docker-basic#ENTRYPOINT\"></a></h4><p>两种格式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> [<span class=\"string\">\"executable\"</span>, <span class=\"string\">\"param1\"</span>, <span class=\"string\">\"param2\"</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> <span class=\"built_in\">command</span> param1 param2 <span class=\"comment\">#（shell中执行）</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p>配置容器启动后执行的命令，并且不可被 <code>docker run</code> 提供的参数覆盖。</p>\n<p>:warning: 每个 Dockerfile 中只能有一个 <code>ENTRYPOINT</code>，当指定多个时，只有最后一个起效。</p>\n<h4 id=\"VOLUME\">VOLUME<a href=\"docker-basic#VOLUME\"></a></h4><p>格式为 <code>VOLUME [&quot;/data&quot;]</code>。</p>\n<p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>\n<h4 id=\"USER\">USER<a href=\"docker-basic#USER\"></a></h4><p>格式为 <code>USER daemon</code>。</p>\n<p>指定运行容器时的用户名或 UID，后续的 <code>RUN</code> 也会使用指定用户。</p>\n<p>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如：<code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code>。要临时获取管理员权限可以使用 <code>gosu</code>，而不推荐 <code>sudo</code>。</p>\n<h4 id=\"WORKDIR\">WORKDIR<a href=\"docker-basic#WORKDIR\"></a></h4><p>格式为 <code>WORKDIR /path/to/workdir</code>。</p>\n<p>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录。</p>\n<p>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WORKDIR /a</span><br><span class=\"line\">WORKDIR b</span><br><span class=\"line\">WORKDIR c</span><br><span class=\"line\">RUN pwd</span><br></pre></td></tr></table></div></figure>\n\n<p>则最终路径为 <code>/a/b/c</code>。</p>\n<h4 id=\"ONBUILD\">ONBUILD<a href=\"docker-basic#ONBUILD\"></a></h4><p>格式为 <code>ONBUILD [INSTRUCTION]</code>。</p>\n<p><strong>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</strong></p>\n<p>例如，Dockerfile 使用如下的内容创建了镜像 <code>image-A</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...]</span><br><span class=\"line\">ONBUILD ADD . /app/src</span><br><span class=\"line\">ONBUILD RUN /usr/local/bin/python-build --dir /app/src</span><br><span class=\"line\">[...]</span><br></pre></td></tr></table></div></figure>\n\n<p>如果基于 image-A 创建新的镜像时，新的Dockerfile中使用 <code>FROM image-A</code>指定基础镜像时，会自动执行 <code>ONBUILD</code> 指令内容，等价于在后面添加了两条指令。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM image-A</span><br><span class=\"line\"></span><br><span class=\"line\">#Automatically run the following</span><br><span class=\"line\">ADD . /app/src</span><br><span class=\"line\">RUN /usr/local/bin/python-build --dir /app/src</span><br></pre></td></tr></table></div></figure>\n\n<p>使用 <code>ONBUILD</code> 指令的镜像，推荐在标签中注明，例如 <code>ruby:1.9-onbuild</code>。</p>\n<h3 id=\"使用Dockerfile创建镜像\">使用Dockerfile创建镜像<a href=\"docker-basic#使用Dockerfile创建镜像\"></a></h3><p>编写完成 Dockerfile 之后，可以通过 <code>docker build</code> 命令来创建镜像。</p>\n<p>基本的格式为 <code>docker build [选项] 路径</code>，该命令将读取指定路径下（包括子目录）的 Dockerfile，并将该路径下所有内容发送给 Docker 服务端，由服务端来创建镜像。因此一般建议放置 Dockerfile 的目录为空目录。也可以通过 <code>.dockerignore</code> 文件（每一行添加一条匹配模式）来让 Docker 忽略路径下的目录和文件。</p>\n<p>要指定镜像的标签信息，可以通过 <code>-t</code> 选项，例如</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t myrepo/myapp /tmp/test1/</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"WEB-应用案例\">WEB 应用案例<a href=\"docker-basic#WEB-应用案例\"></a></h2><h3 id=\"运行一个WEB应用\">运行一个WEB应用<a href=\"docker-basic#运行一个WEB应用\"></a></h3><p>在容器内运行一个 Python Flask 应用</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull training/webapp</span><br><span class=\"line\">docker run -d -P training/webapp python app.py</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-d</code> : 让容器后台运行</li>\n<li><code>-P</code> : 将容器内部使用的网络端口映射到我们使用的主机上(随机)</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8000:5000 training/webapp python app.py</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-p</code> : 将容器内部使用的端口映射到我们使用 的主机上(将容器内的5000端口映射到本地主机的8000端口上)</li>\n</ul>\n<h3 id=\"查看-WEB-应用容器\">查看 WEB 应用容器<a href=\"docker-basic#查看-WEB-应用容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             PORTS</span><br><span class=\"line\">184e850e9001        training/webapp     &quot;python app.py&quot;     0.0.0.0:8000-&gt;5000/tcp</span><br><span class=\"line\">dad8d5714980        training/webapp     &quot;python app.py&quot;     0.0.0.0:32768-&gt;5000/tcp</span><br></pre></td></tr></table></div></figure>\n\n<p>这里多了个端口信息</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PORTS</span><br><span class=\"line\">0.0.0.0:8000-&gt;5000/tcp</span><br><span class=\"line\">0.0.0.0:32768-&gt;5000/tcp</span><br></pre></td></tr></table></div></figure>\n\n<p>Docker 开放了 5000 端口(默认Python Flask端口) 映射到主机端口32768和8000上。</p>\n<p>这时可以通过 <a href=\"http://192.168.99.100:32768/\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100:32768/</a> 和 <a href=\"http://192.168.99.100:8000/\" target=\"_blank\" rel=\"noopener\">http://192.168.99.100:8000/</a> 访问WEB应用。192.168.99.100是我的vm虚拟机的ip。</p>\n<h3 id=\"快捷查看网络端口\">快捷查看网络端口<a href=\"docker-basic#快捷查看网络端口\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker port &lt;name/id&gt;</span><br><span class=\"line\">5000/tcp -&gt; 0.0.0.0:8000</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"查看-WEB-应用程序日志\">查看 WEB 应用程序日志<a href=\"docker-basic#查看-WEB-应用程序日志\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs -f &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class=\"line\">192.168.99.1 - - [30/Aug/2019 03:52:56] &quot;GET / HTTP/1.1&quot; 200 -</span><br><span class=\"line\">192.168.99.1 - - [30/Aug/2019 03:52:56] &quot;GET /favicon.ico HTTP/1.1&quot; 404 -</span><br><span class=\"line\">192.168.99.1 - - [30/Aug/2019 03:53:05] &quot;GET / HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>-f</code> : 让 docker logs 在输出后不是直接退出，而是一直接收该容器的输出</li>\n</ul>\n<h3 id=\"查看-WEB-应用程序容器内运行的进程\">查看 WEB 应用程序容器内运行的进程<a href=\"docker-basic#查看-WEB-应用程序容器内运行的进程\"></a></h3><p>查看容器内部运行的进程</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker top &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UID       PID      PPID     C      STIME      TTY     TIME          CMD</span><br><span class=\"line\">root      3445     3423     0      03:49      ?       00:00:00      python app.py</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"查看-Docker-容器的配置与状态信息\">查看 Docker 容器的配置与状态信息<a href=\"docker-basic#查看-Docker-容器的配置与状态信息\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect &lt;name/id&gt;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;Id&quot;: &quot;184e850e9001ae4527da694f7337c6a95c49555524d4f535072ca7f8556e367e&quot;,</span><br><span class=\"line\">        &quot;Created&quot;: &quot;2019-08-30T03:49:51.305996931Z&quot;,</span><br><span class=\"line\">        &quot;Path&quot;: &quot;python&quot;,</span><br><span class=\"line\">        &quot;Args&quot;: [</span><br><span class=\"line\">            &quot;app.py&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;State&quot;: &#123;</span><br><span class=\"line\">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class=\"line\">            &quot;Running&quot;: true,</span><br><span class=\"line\">            &quot;Paused&quot;: false,</span><br><span class=\"line\">            &quot;Restarting&quot;: false,</span><br><span class=\"line\">            &quot;OOMKilled&quot;: false,</span><br><span class=\"line\">            &quot;Dead&quot;: false,</span><br><span class=\"line\">            &quot;Pid&quot;: 3445,</span><br><span class=\"line\">            &quot;ExitCode&quot;: 0,</span><br><span class=\"line\">            &quot;Error&quot;: &quot;&quot;,</span><br><span class=\"line\">            &quot;StartedAt&quot;: &quot;2019-08-30T03:49:51.601670982Z&quot;,</span><br><span class=\"line\">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"移除-WEB-应用容器\">移除 WEB 应用容器<a href=\"docker-basic#移除-WEB-应用容器\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop &lt;name/id&gt;    # 移除容器前要先停止容器</span><br><span class=\"line\">docker rm &lt;name/id&gt;\t\t # 移除容器</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"查找宿主机进程所在的容器\">查找宿主机进程所在的容器<a href=\"docker-basic#查找宿主机进程所在的容器\"></a></h2><p>假设要查找的进程是40850</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker_query_pid=40850</span><br><span class=\"line\">for docker_id in $(docker ps -q | xargs)</span><br><span class=\"line\">do</span><br><span class=\"line\">    if `expr <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.735ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 4622 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">(docker top </title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"389\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"913\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"1398\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6B\" x=\"1832\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"2353\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"2820\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"3271\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"3633\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"4118\" y=\"0\"/>\n</g>\n</svg>docker_id | grep $docker_query_pid | wc -l) &gt; 0`</span><br><span class=\"line\">    then</span><br><span class=\"line\">        docker ps | grep $docker_id</span><br><span class=\"line\">        docker top <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"13.774ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 5930.3 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">docker_id | grep </title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"523\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"1009\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6B\" x=\"1442\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1964\" y=\"0\"/>\n<g transform=\"translate(2430,0)\">\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"0\" y=\"0\"/>\n <use transform=\"scale(0.707)\" xlink:href=\"#E1-MJMATHI-69\" x=\"638\" y=\"-213\"/>\n</g>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"3226\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-7C\" x=\"3749\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"4028\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"4508\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"4960\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"5426\" y=\"0\"/>\n</g>\n</svg>docker_query_pid</span><br><span class=\"line\">    fi</span><br><span class=\"line\">done</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"Matrix Calculus 矩阵微积分","link":"matrix-calculus"},"next":{"title":"Golang基础","link":"golang-basic"},"plink":"https://yuxinzhao.net/docker-basic/","toc":[{"title":"容器","id":"容器","index":"1","children":[{"title":"用容器执行指令","id":"用容器执行指令","index":"1.1"},{"title":"进行交互式的容器","id":"进行交互式的容器","index":"1.2"},{"title":"后台启动容器","id":"后台启动容器","index":"1.3"},{"title":"容器命名","id":"容器命名","index":"1.4"},{"title":"将容器的端口映射到本机的端口上","id":"将容器的端口映射到本机的端口上","index":"1.5"},{"title":"查看所有的容器","id":"查看所有的容器","index":"1.6"},{"title":"查看容器输出","id":"查看容器输出","index":"1.7"},{"title":"查看容器内部运行的进程","id":"查看容器内部运行的进程","index":"1.8"},{"title":"查看容器的配置和状态信息","id":"查看容器的配置和状态信息","index":"1.9"},{"title":"查看网络端口","id":"查看网络端口","index":"1.10"},{"title":"停止容器","id":"停止容器","index":"1.11"},{"title":"重启容器","id":"重启容器","index":"1.12"},{"title":"移除容器","id":"移除容器","index":"1.13"},{"title":"在运行的容器中执行命令","id":"在运行的容器中执行命令","index":"1.14"},{"title":"进入容器","id":"进入容器","index":"1.15"},{"title":"导出容器","id":"导出容器","index":"1.16"},{"title":"导入容器为镜像","id":"导入容器为镜像","index":"1.17"}]},{"title":"镜像","id":"镜像","index":"2","children":[{"title":"列出镜像列表","id":"列出镜像列表","index":"2.1"},{"title":"查找镜像","id":"查找镜像","index":"2.2"},{"title":"拖取镜像","id":"拖取镜像","index":"2.3"},{"title":"修改/更新镜像","id":"修改-更新镜像","index":"2.4"},{"title":"Dockerfile 构建镜像","id":"Dockerfile-构建镜像","index":"2.5"},{"title":"设置镜像标签","id":"设置镜像标签","index":"2.6"},{"title":"导出镜像到本地","id":"导出镜像到本地","index":"2.7"},{"title":"从本地载入镜像","id":"从本地载入镜像","index":"2.8"},{"title":"移除镜像","id":"移除镜像","index":"2.9"}]},{"title":"仓库","id":"仓库","index":"3","children":[{"title":"Docker Hub","id":"Docker-Hub","index":"3.1","children":[{"title":"登录","id":"登录","index":"3.1.1"},{"title":"搜索镜像","id":"搜索镜像","index":"3.1.2"},{"title":"拉取镜像","id":"拉取镜像","index":"3.1.3"},{"title":"推送镜像到Docker Hub","id":"推送镜像到Docker-Hub","index":"3.1.4"},{"title":"自动创建","id":"自动创建","index":"3.1.5"}]},{"title":"私有仓库","id":"私有仓库","index":"3.2","children":[{"title":"容器安装docker-registry","id":"容器安装docker-registry","index":"3.2.1"},{"title":"本地安装docker-registry","id":"本地安装docker-registry","index":"3.2.2"},{"title":"在私有仓库上传、下载、搜索镜像","id":"在私有仓库上传、下载、搜索镜像","index":"3.2.3"}]},{"title":"仓库配置文件","id":"仓库配置文件","index":"3.3","children":[{"title":"模板","id":"模板","index":"3.3.1"},{"title":"示例配置","id":"示例配置","index":"3.3.2"}]}]},{"title":"数据卷 /数据管理","id":"数据卷-数据管理","index":"4","children":[{"title":"创建数据卷","id":"创建数据卷","index":"4.1"},{"title":"挂在一个主机目录作为数据卷","id":"挂在一个主机目录作为数据卷","index":"4.2"},{"title":"挂载一个本地主机文件作为数据卷","id":"挂载一个本地主机文件作为数据卷","index":"4.3"},{"title":"数据卷容器 / 容器间共享持续更新的数据","id":"数据卷容器-容器间共享持续更新的数据","index":"4.4"},{"title":"数据卷备份","id":"数据卷备份","index":"4.5"},{"title":"数据卷恢复","id":"数据卷恢复","index":"4.6"}]},{"title":"容器网络","id":"容器网络","index":"5","children":[{"title":"容器互联","id":"容器互联","index":"5.1"}]},{"title":"Dockerfile","id":"Dockerfile","index":"6","children":[{"title":"基本结构","id":"基本结构","index":"6.1"},{"title":"指令","id":"指令","index":"6.2","children":[{"title":"FROM","id":"FROM","index":"6.2.1"},{"title":"MAINTAINER","id":"MAINTAINER","index":"6.2.2"},{"title":"RUN","id":"RUN","index":"6.2.3"},{"title":"CMD","id":"CMD","index":"6.2.4"},{"title":"EXPOSE","id":"EXPOSE","index":"6.2.5"},{"title":"ENV","id":"ENV","index":"6.2.6"},{"title":"ADD","id":"ADD","index":"6.2.7"},{"title":"COPY","id":"COPY","index":"6.2.8"},{"title":"ENTRYPOINT","id":"ENTRYPOINT","index":"6.2.9"},{"title":"VOLUME","id":"VOLUME","index":"6.2.10"},{"title":"USER","id":"USER","index":"6.2.11"},{"title":"WORKDIR","id":"WORKDIR","index":"6.2.12"},{"title":"ONBUILD","id":"ONBUILD","index":"6.2.13"}]},{"title":"使用Dockerfile创建镜像","id":"使用Dockerfile创建镜像","index":"6.3"}]},{"title":"WEB 应用案例","id":"WEB-应用案例","index":"7","children":[{"title":"运行一个WEB应用","id":"运行一个WEB应用","index":"7.1"},{"title":"查看 WEB 应用容器","id":"查看-WEB-应用容器","index":"7.2"},{"title":"快捷查看网络端口","id":"快捷查看网络端口","index":"7.3"},{"title":"查看 WEB 应用程序日志","id":"查看-WEB-应用程序日志","index":"7.4"},{"title":"查看 WEB 应用程序容器内运行的进程","id":"查看-WEB-应用程序容器内运行的进程","index":"7.5"},{"title":"查看 Docker 容器的配置与状态信息","id":"查看-Docker-容器的配置与状态信息","index":"7.6"},{"title":"移除 WEB 应用容器","id":"移除-WEB-应用容器","index":"7.7"}]},{"title":"查找宿主机进程所在的容器","id":"查找宿主机进程所在的容器","index":"8"}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/docker-basic/\" title=\"Docker基础\">https://yuxinzhao.net/docker-basic/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}