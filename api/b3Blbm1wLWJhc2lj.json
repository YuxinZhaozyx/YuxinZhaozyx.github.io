{"title":"OpenMP基础","date":"2020-04-08T10:04:28.000Z","thumbnail":"openmp-basic/openmp.png","link":"openmp-basic","comments":true,"tags":["multiprocessing"],"categories":["programming-language"],"updated":"2022-01-04T08:35:48.611Z","content":"<p>本文介绍 OpenMP C++版本的基本使用方法。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"安装\">安装<a href=\"openmp-basic#安装\"></a></h1><p>无需安装，gcc自带。只需在编译时启动 <code>-fopenmp</code> 选项。</p>\n<h1 id=\"第一个OpenMP程序\">第一个OpenMP程序<a href=\"openmp-basic#第一个OpenMP程序\"></a></h1><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp parallel</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello world!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>在使用g++编译时应使用 <code>-fopenmp</code> 选项。</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> g++ test1.cpp -fopenmp</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./a.out</span></span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">Hello world!</span><br></pre></td></tr></table></div></figure>\n\n<p>程序输出了4个 <code>Hello world!</code>， 这是因为 <code>#pragma omp parallel</code> 会根据硬件和操作系统配置在运行时生成代码，创建尽可能多的线程，每个线程的起始例程为代码块中位于指令之后的代码。</p>\n<h1 id=\"控制线程数量\">控制线程数量<a href=\"openmp-basic#控制线程数量\"></a></h1><h2 id=\"使用编译命令的-num-threads-参数控制线程数量\">使用编译命令的 <code>num_threads</code> 参数控制线程数量<a href=\"openmp-basic#使用编译命令的-num-threads-参数控制线程数量\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp parallel num_threads(6)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上述程序控制用6个线程执行代码块，因此输出了6个<code>Hello World!</code>。</p>\n<h2 id=\"使用-omp-set-num-threads-控制线程数量\">使用 <code>omp_set_num_threads</code> 控制线程数量<a href=\"openmp-basic#使用-omp-set-num-threads-控制线程数量\"></a></h2><p>使用 OpenMP 的 API 需要包含头文件 <code>omp.h</code> 。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;omp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    omp_set_num_threads(<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp parallel</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"通过环境变量控制线程数量\">通过环境变量控制线程数量<a href=\"openmp-basic#通过环境变量控制线程数量\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp parallel</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello world!\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在外部环境中通过环境变量 <code>OMP_NUM_THREADS</code> 控制线程数量。仅当没有在程序中显式设置线程数量时，该环境变量才会生效。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">export</span> OMP_NUM_THREADS=2</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./a.out</span></span><br><span class=\"line\">Hello world!</span><br><span class=\"line\">Hello world!</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"并行化-for-循环\">并行化 <code>for</code> 循环<a href=\"openmp-basic#并行化-for-循环\"></a></h1><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;omp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">clock_t</span> clock_timer;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> wall_timer;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> c[<span class=\"number\">100000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> nthreads = <span class=\"number\">1</span>; nthreads &lt;= <span class=\"number\">8</span>; nthreads++) &#123;</span><br><span class=\"line\">        clock_timer = clock();</span><br><span class=\"line\">        wall_timer = omp_get_wtime();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp parallel for private(i) num_threads(nthreads)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++)</span><br><span class=\"line\">            c[i] = <span class=\"built_in\">sqrt</span>(i * <span class=\"number\">4</span> + i * <span class=\"number\">2</span> + i);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"threads: \"</span> &lt;&lt; nthreads &lt;&lt; <span class=\"string\">\" time on clock(): \"</span> &lt;&lt; (<span class=\"keyword\">double</span>)(clock() - clock_timer) / CLOCKS_PER_SEC &lt;&lt; <span class=\"string\">\" time on wall: \"</span> &lt;&lt; omp_get_wtime() - wall_timer &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><code>omp_get_wtime</code> 任选一个点返回已用去的时间，单位为秒。</li>\n<li><code>parallel for private(i)</code> 意味着循环变量 <code>i</code> 将作为一个线程进行处理，每个线程有一个该变量的副本，且未进行初始化。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">threads: 1 time on clock(): 0.002979 time on wall: 0.00297725</span><br><span class=\"line\">threads: 2 time on clock(): 0.000751 time on wall: 0.000606505</span><br><span class=\"line\">threads: 3 time on clock(): 0.000426 time on wall: 0.000428914</span><br><span class=\"line\">threads: 4 time on clock(): 0.006254 time on wall: 0.00260468</span><br><span class=\"line\">threads: 5 time on clock(): 0.002958 time on wall: 0.00133061</span><br><span class=\"line\">threads: 6 time on clock(): 0.001262 time on wall: 0.000695385</span><br><span class=\"line\">threads: 7 time on clock(): 0.001098 time on wall: 0.000518768</span><br><span class=\"line\">threads: 8 time on clock(): 0.001211 time on wall: 0.000538669</span><br></pre></td></tr></table></div></figure>\n\n<p>当不加 <code>private(i)</code> ，即使用直接使用 <code>parallel for</code> 时，将不再按照一个变量一个线程来并行，而是按照平均分配循环次数。如线程数为3，循环范围为0-8时，线程0负责0-2的范围，线程1负责3-5，线程2负责6-8。</p>\n<p>可以通过 <code>schedule(type, chunksize)</code> 来调整循环的分配方式：</p>\n<ul>\n<li><code>type</code> 为调度方式，有以下5种<ul>\n<li><code>static</code><ul>\n<li>在循环开始之前就先设置好迭代的轮数。</li>\n<li>将循环以 <code>chunksize</code> 为大小，分成 <code>total_iterations / chunksize</code> 份chunk，每个线程按顺序一份份执行。</li>\n<li>当省略 <code>chunksize</code> 时，<code>chunksize = totoal_iterations / thread_count</code>。</li>\n</ul>\n</li>\n<li><code>dynamic</code><ul>\n<li>在循环执行过程中，动态决定哪个线程执行哪个chunk。</li>\n<li><code>chunksize</code> 的设置同 <code>static</code>, 但是在运行时哪个线程空闲chunk就会被分配给哪个线程。</li>\n<li>当省略 <code>chunksize</code> 时， <code>chunksize = 1</code>。</li>\n</ul>\n</li>\n<li><code>guided</code><ul>\n<li>在循环执行过程中，动态决定哪个线程执行哪个chunk。</li>\n<li>chunk的大小不固定为<code>chunksize</code>, 而是在运行过程中递减，直至为每个chunk为 <code>chunksize</code> 大小。</li>\n<li>当省略 <code>chunksize</code> 时， <code>chunksize = 1</code>。</li>\n</ul>\n</li>\n<li><code>auto</code><ul>\n<li>运行时根据系统自动选择合适的调度方式。</li>\n</ul>\n</li>\n<li><code>runtime</code><ul>\n<li>运行时通过环境变量 <code>OMP_SCHEDULE</code> 决定使用哪种调度方式，如 <code>export OMP_SCHEDULE=&quot;static, 1&quot;</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp parallel for num_threads(thread_count) schedule(static, 2)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    result[i] = f(i);</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"规约操作-reduction-operators\">规约操作(reduction operators)<a href=\"openmp-basic#规约操作-reduction-operators\"></a></h1><p>规约操作符是一个二元操作符，比如 <code>+</code> 或 <code>*</code>。规约操作指讲一系列操作数用同一个规约操作符重复地进行计算，中间结果都存储到同一变量(规约变量)的过程。</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduction(&lt;<span class=\"keyword\">operator</span>&gt;: &lt;variable <span class=\"built_in\">list</span>&gt;)</span><br></pre></td></tr></table></div></figure>\n\n<p>其中的操作符可以是 <code>+</code>, <code>*</code>, <code>-</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&amp;&amp;</code>, <code>||</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">global_result = 0.0;</span><br><span class=\"line\">#pragma omp parallel for num_threads(4) reduction(+: global_result)</span><br><span class=\"line\">for (i = 1; i &lt; n; i++)</span><br><span class=\"line\">    global_result += i</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"临界区-critical-section\">临界区(critical section)<a href=\"openmp-basic#临界区-critical-section\"></a></h1><h2 id=\"编译指示\">编译指示<a href=\"openmp-basic#编译指示\"></a></h2><p>OpenMP中处理一些互斥的区域时，需要显式指定临界区。</p>\n<p><strong>语法:</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp critical (optional section name)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// no 2 threads can execute this code blcok concurrently</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>代码块中的代码同一时间只会有一个线程会执行。</p>\n<p><code>optional section name</code> 是一个全局标识符，即临界区的名字，同一时刻不能同时运行两个相同名字的临界区。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp critical (section1)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    myhashtable.insert(<span class=\"string\">\"key1\"</span>, <span class=\"string\">\"value1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp critical (section2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    myhashtable.insert(<span class=\"string\">\"key2\"</span>, <span class=\"string\">\"value2\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"互斥锁\">互斥锁<a href=\"openmp-basic#互斥锁\"></a></h2><p>除了编译指示，OpenMP还提供了互斥锁 <code>omp_lock_t</code>。主要为以下5个API：</p>\n<ul>\n<li><code>omp_init_lock</code>：必须时第一个访问<code>omp_lock_t</code>的API，使用它来初始化锁。初始化后锁处于未设置状态。</li>\n<li><code>omp_destroy_lock</code>：销毁锁，调用时锁必须处于未设置状态。</li>\n<li><code>omp_set_lock</code>：设置锁，获得互斥。如果一个线程无法设置锁，将会阻塞直到成功设置锁。 </li>\n<li><code>omp_test_lock</code>：尝试设置锁，不会阻塞，成功返回1，失败返回0。</li>\n<li><code>omp_unset_lock</code>：释放锁。</li>\n</ul>\n<p>例: 构建一个线程安全的队列。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;omp.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSafeQueue</span> :</span> <span class=\"keyword\">public</span> ThreadUnsafeQueue&lt;T&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ThreadSafeQueue(maxsize = <span class=\"number\">10</span>) : ThreadUnsafeQueue(maxsize) &#123;</span><br><span class=\"line\">        omp_init_lock(&amp;lock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~ThreadSafeQueue() &#123;</span><br><span class=\"line\">        omp_destroy_lock(&amp;lock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; data)</span> </span>&#123;</span><br><span class=\"line\">        omp_set_lock(&amp;lock);</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> result = ThreadUnsafeQueue&lt;T&gt;::push(data);</span><br><span class=\"line\">        omp_unset_lock(&amp;lock);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">trypush</span><span class=\"params\">(<span class=\"keyword\">const</span> T&amp; data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> result = omp_test_lock(&amp;lock);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">            result = ThreadUnsafeQueue&lt;T&gt;::push(data);</span><br><span class=\"line\">            omp_unset_lock(&amp;lock);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// likewise for pop</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">omp_lock_t</span> lock;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"嵌套锁\">嵌套锁<a href=\"openmp-basic#嵌套锁\"></a></h2><p>OpenMP提供了 <code>omp_nest_lock_t</code> 锁。它与 <code>omp_lock_t</code> 类似，但有一个优点: 当已经持有锁的线程通过 <code>omp_set_nest_lock</code> 重新获得锁时，内部计数器会加一，当多个 <code>omp_unset_nest_lock</code> 使计数器置为0时，才会释放锁。</p>\n<p>API与<code>omp_lock_t</code> 类似:</p>\n<ul>\n<li><code>omp_init_nest_lock</code>：必须时第一个访问<code>omp_lock_t</code>的API，使用它来初始化锁。初始化后锁处于未设置状态，计数器为0。</li>\n<li><code>omp_destroy_nest_lock</code>：销毁锁，销毁计数器不为0的锁将产生未定义的行为。</li>\n<li><code>omp_set_nest_lock</code>：设置锁，获得互斥。若线程已持有该锁，则计数器+1，仍然能获得锁，若不持有该锁，将会阻塞直到成功设置锁。 </li>\n<li><code>omp_test_nest_lock</code>：尝试设置锁，不会阻塞，成功返回1，失败返回0。</li>\n<li><code>omp_unset_nest_lock</code>：计数器-1，当计数器为0时释放锁。</li>\n</ul>\n<h1 id=\"控制任务执行的细粒度\">控制任务执行的细粒度<a href=\"openmp-basic#控制任务执行的细粒度\"></a></h1><p>通过 <code>sections</code> 可以将没有相关性的程序用 <code>#pragma omp section</code> 分割区块，各区块分得一个线程并行运行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;omp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp parallel</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"All threads run this\\n\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp sections</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp section</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; omp_get_thread_num() &lt;&lt; <span class=\"string\">\"[A] This executes in parallel\\n\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp section</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; omp_get_thread_num() &lt;&lt; <span class=\"string\">\"[B] This executes in parallel\\n\"</span>;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; omp_get_thread_num() &lt;&lt; <span class=\"string\">\"[C] This executes after B\\n\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp section</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; omp_get_thread_num() &lt;&lt; <span class=\"string\">\"[D] This also executes in parallel\\n\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>每个section独立运行，互不干扰。</li>\n<li>OpenMP会使用当前空闲的线程运行 section，如果不加 <code>#pragma omp parallel</code>，空闲的线程就一直只有主线程一个，所有的section还是会在单线程上串行运行。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">All threads run this</span><br><span class=\"line\">0[A] This executes in parallel</span><br><span class=\"line\">0[B] This executes in parallel</span><br><span class=\"line\">All threads run this</span><br><span class=\"line\">1[D] This also executes in parallel</span><br><span class=\"line\">0[C] This executes after B</span><br><span class=\"line\">All threads run this</span><br><span class=\"line\">All threads run this</span><br></pre></td></tr></table></div></figure>\n\n<p>也可以将 <code>parallel</code> 和 <code>sections</code> 合并:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;omp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp parallel sections</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp section</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; omp_get_thread_num() &lt;&lt; <span class=\"string\">\"[A] This executes in parallel\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp section</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; omp_get_thread_num() &lt;&lt; <span class=\"string\">\"[B] This executes in parallel\\n\"</span>;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; omp_get_thread_num() &lt;&lt; <span class=\"string\">\"[C] This executes after B\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> omp section</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; omp_get_thread_num() &lt;&lt; <span class=\"string\">\"[D] This also executes in parallel\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0[A] This executes in parallel</span><br><span class=\"line\">0[D] This also executes in parallel</span><br><span class=\"line\">1[B] This executes in parallel</span><br><span class=\"line\">1[C] This executes after B</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"参考资料\">参考资料<a href=\"openmp-basic#参考资料\"></a></h1><ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/aix/library/au-aix-openmp-framework/index.html\" target=\"_blank\" rel=\"noopener\">通过GCC学习OpenMP框架 | IBM</a></li>\n<li><a href=\"https://www.openmp.org/resources/refguides/\" target=\"_blank\" rel=\"noopener\">OpenMP 文档</a></li>\n<li><a href=\"https://www.w3cschool.cn/openmp/dict\" target=\"_blank\" rel=\"noopener\">OpenMP Reference Sheet for C/C++ | W3Cschool</a></li>\n</ul>\n","prev":{"title":"计算机视觉-几何变换","link":"computer-vision-geometric-transformation"},"next":{"title":"[论文笔记] Focal Loss for Region Proposal Network","link":"focal-loss-for-region-proposal-network"},"plink":"https://yuxinzhao.net/openmp-basic/","toc":[{"title":"安装","id":"安装","index":"1"},{"title":"第一个OpenMP程序","id":"第一个OpenMP程序","index":"2"},{"title":"控制线程数量","id":"控制线程数量","index":"3","children":[{"title":"使用编译命令的 <code>num_threads</code> 参数控制线程数量","id":"使用编译命令的-num-threads-参数控制线程数量","index":"3.1"},{"title":"使用 <code>omp_set_num_threads</code> 控制线程数量","id":"使用-omp-set-num-threads-控制线程数量","index":"3.2"},{"title":"通过环境变量控制线程数量","id":"通过环境变量控制线程数量","index":"3.3"}]},{"title":"并行化 <code>for</code> 循环","id":"并行化-for-循环","index":"4"},{"title":"规约操作(reduction operators)","id":"规约操作-reduction-operators","index":"5"},{"title":"临界区(critical section)","id":"临界区-critical-section","index":"6","children":[{"title":"编译指示","id":"编译指示","index":"6.1"},{"title":"互斥锁","id":"互斥锁","index":"6.2"},{"title":"嵌套锁","id":"嵌套锁","index":"6.3"}]},{"title":"控制任务执行的细粒度","id":"控制任务执行的细粒度","index":"7"},{"title":"参考资料","id":"参考资料","index":"8"}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/openmp-basic/\" title=\"OpenMP基础\">https://yuxinzhao.net/openmp-basic/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}