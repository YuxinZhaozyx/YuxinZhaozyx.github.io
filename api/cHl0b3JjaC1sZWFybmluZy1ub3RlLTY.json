{"title":"[PyTorch学习笔记] 数据的加载和预处理","date":"2019-07-23T17:20:42.000Z","thumbnail":"/static/image/pytorch.png","link":"pytorch-learning-note-6","comments":true,"tags":["pytorch"],"categories":["machine-learning"],"updated":"2022-01-04T08:35:48.627Z","content":"<p>PyTorch通过torch.utils.data对一般常用的数据加载进行了封装，可以很容易地实现多线程数据预读和批量加载。 并且torchvision已经预先实现了常用图像数据集，包括CIFAR-10，ImageNet、COCO、MNIST、LSUN等数据集，可通过torchvision.datasets方便地调用</p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"Dataset\">Dataset<a href=\"pytorch-learning-note-6#Dataset\"></a></h2><p><code>Dataset</code>是一个抽象类, 为了能够方便的读取，需要将要使用的数据包装为<code>Dataset</code>类。 自定义的<code>Dataset</code>需要继承它并且实现两个成员方法：</p>\n<ol>\n<li><code>__getitem__()</code> 该方法定义用索引(<code>0</code> 到 <code>len(self)</code>)获取一条数据或一个样本</li>\n<li><code>__len__()</code> 该方法返回数据集的总长度</li>\n</ol>\n<p>下面我们使用kaggle上的一个竞赛<a href=\"https://www.kaggle.com/c/bluebook-for-bulldozers/data\" target=\"_blank\" rel=\"noopener\">bluebook for bulldozers</a>自定义一个数据集，为了方便介绍，我们使用里面的数据字典来做说明（因为条数少）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个数据集</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulldozerDataset</span><span class=\"params\">(Dataset)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" 数据集演示 \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, csv_file)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 实现初始化方法，在初始化的时候将数据载入 \"\"\"</span></span><br><span class=\"line\">        self.dataframe = pd.read_csv(csv_file)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 返回dataframe的长度 \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.dataframe)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, idx)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\" 根据 idx 返回一行数据 \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.dataframe.iloc[idx].SalePrice</span><br></pre></td></tr></table></div></figure>\n\n<p>至此，我们的数据集已经定义完成了，我们可以实例话一个对象访问他</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset_demo= BulldozerDataset(<span class=\"string\">'median_benchmark.csv'</span>)</span><br></pre></td></tr></table></div></figure>\n\n<p>我们可以直接使用如下命令查看数据集数据</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实现了 __len__ 方法所以可以直接使用len获取数据总数</span></span><br><span class=\"line\">len(dataset_demo)</span><br><span class=\"line\"><span class=\"comment\">#用索引可以直接访问对应的数据, 对应 __getitem__ 方法</span></span><br><span class=\"line\">dataset_demo[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11573</span></span><br><span class=\"line\"><span class=\"number\">24000.0</span></span><br></pre></td></tr></table></div></figure>\n\n<p>自定义的数据集已经创建好了，下面我们使用官方提供的数据载入器，读取数据</p>\n<h2 id=\"Dataloader\">Dataloader<a href=\"pytorch-learning-note-6#Dataloader\"></a></h2><p><code>DataLoader</code>为我们提供了对<code>Dataset</code>的读取操作，常用参数有：<code>batch_size</code>(每个batch的大小), <code>shuffle</code>(是否进行shuffle操作), <code>num_workers</code>(加载数据的时候使用几个子进程)，下面做一个简单的操作</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataloader = torch.utils.data.DataLoader(dataset_demo, batch_size=<span class=\"number\">10</span>, shuffle=<span class=\"literal\">True</span>, num_workers=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></div></figure>\n\n<p>DataLoader返回的是一个可迭代对象，我们可以使用迭代器分次获取数据</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">idata = iter(dataloader)</span><br><span class=\"line\">print(next(idata))</span><br></pre></td></tr></table></div></figure>\n\n<p>常见的用法是使用for循环对其进行遍历</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i, data <span class=\"keyword\">in</span> enumerate(dl):</span><br><span class=\"line\">    print(i,data)</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"torchvision-包\">torchvision 包<a href=\"pytorch-learning-note-6#torchvision-包\"></a></h2><p>torchvision 是PyTorch中专门用来处理图像的库，PyTorch官网的安装教程中最新的pip install torchvision 就是安装这个包。</p>\n<h3 id=\"torchvision-datasets\">torchvision.datasets<a href=\"pytorch-learning-note-6#torchvision-datasets\"></a></h3><p><code>torchvision.datasets</code> 可以理解为PyTorch团队自定义的dataset，这些dataset帮我们提前处理好了很多的图片数据集，我们拿来就可以直接使用：</p>\n<ul>\n<li>MNIST</li>\n<li>COCO</li>\n<li>Captions</li>\n<li>Detection</li>\n<li>LSUN</li>\n<li>ImageFolder</li>\n<li>Imagenet-12</li>\n<li>CIFAR</li>\n<li>STL10</li>\n<li>SVHN</li>\n<li>PhotoTour</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torchvision.datasets <span class=\"keyword\">as</span> datasets</span><br><span class=\"line\"></span><br><span class=\"line\">trainset = datasets.MNIST(root=<span class=\"string\">'./data'</span>,  <span class=\"comment\"># 表示 MNIST 数据的加载的目录</span></span><br><span class=\"line\">                          train=<span class=\"literal\">True</span>,     <span class=\"comment\"># 表示是否加载数据库的训练集，False的时候加载测试集</span></span><br><span class=\"line\">                          download=<span class=\"literal\">True</span>,  <span class=\"comment\"># 表示是否自动下载 MNIST 数据集</span></span><br><span class=\"line\">                          transform=<span class=\"literal\">None</span>) <span class=\"comment\"># 表示是否需要对数据进行预处理，None为不进行预处理</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"torchvision-models\">torchvision.models<a href=\"pytorch-learning-note-6#torchvision-models\"></a></h3><p>torchvision不仅提供了常用图片数据集，还提供了训练好的模型，可以加载之后，直接使用，或者在进行迁移学习 torchvision.models模块的 子模块中包含以下模型结构。</p>\n<ul>\n<li>AlexNet</li>\n<li>VGG</li>\n<li>ResNet</li>\n<li>SqueezeNet</li>\n<li>DenseNet</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#我们直接可以使用训练好的模型，当然这个与datasets相同，都是需要从服务器下载的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision.models <span class=\"keyword\">as</span> models</span><br><span class=\"line\"></span><br><span class=\"line\">resnet18 = models.resnet18(pretrained=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"torchvision-transforms\">torchvision.transforms<a href=\"pytorch-learning-note-6#torchvision-transforms\"></a></h3><p>transforms 模块提供了一般的图像转换操作类，用作数据处理和数据增强</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms <span class=\"keyword\">as</span> transforms</span><br><span class=\"line\"></span><br><span class=\"line\">transform = transforms.Compose([</span><br><span class=\"line\">    transforms.RandomCrop(<span class=\"number\">32</span>, padding=<span class=\"number\">4</span>),  <span class=\"comment\">#先四周填充0，在把图像随机裁剪成32*32</span></span><br><span class=\"line\">    transforms.RandomHorizontalFlip(),  <span class=\"comment\">#图像一半的概率翻转，一半的概率不翻转</span></span><br><span class=\"line\">    transforms.RandomRotation((<span class=\"number\">-45</span>,<span class=\"number\">45</span>)), <span class=\"comment\">#随机旋转</span></span><br><span class=\"line\">    transforms.ToTensor(),</span><br><span class=\"line\">    transforms.Normalize((<span class=\"number\">0.4914</span>, <span class=\"number\">0.4822</span>, <span class=\"number\">0.4465</span>), (<span class=\"number\">0.229</span>, <span class=\"number\">0.224</span>, <span class=\"number\">0.225</span>)), <span class=\"comment\">#R,G,B每层的归一化用到的均值和方差 mean=[0.485, 0.456, 0.406],std=[0.229, 0.224, 0.225]</span></span><br><span class=\"line\">])</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"[PyTorch学习笔记] PyTorch的可视化工具Visdom","link":"pytorch-learning-note-visdom"},"next":{"title":"[PyTorch学习笔记] Data Parallelism","link":"pytorch-learning-note-5"},"plink":"https://yuxinzhao.net/pytorch-learning-note-6/","toc":[{"title":"Dataset","id":"Dataset","index":"1"},{"title":"Dataloader","id":"Dataloader","index":"2"},{"title":"torchvision 包","id":"torchvision-包","index":"3","children":[{"title":"torchvision.datasets","id":"torchvision-datasets","index":"3.1"},{"title":"torchvision.models","id":"torchvision-models","index":"3.2"},{"title":"torchvision.transforms","id":"torchvision-transforms","index":"3.3"}]}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/pytorch-learning-note-6/\" title=\"[PyTorch学习笔记] 数据的加载和预处理\">https://yuxinzhao.net/pytorch-learning-note-6/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}