{"title":"字符串匹配技术之 Horspool算法和Boyer-Moore算法","date":"2019-10-15T18:12:24.000Z","link":"horspool-boyer-moore","comments":true,"tags":["string-matching"],"categories":["algorithm"],"updated":"2022-01-04T08:35:48.595Z","content":"<p>字符串匹配问题要求在一个较长的字符串中，匹配一个较短的字符串，找到短字符串在长字符串中第一次出现的位置。本文将介绍 Boyer-Moore 算法及其简化版本 Horspool 算法。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"问题\">问题<a href=\"horspool-boyer-moore#问题\"></a></h1><p>在一个被称为<strong>文本(text)</strong>的n个字符的串中，寻找一个被称为<strong>模式(pattern)</strong>的给定m个字符的串。</p>\n<h1 id=\"Horspool-算法\">Horspool 算法<a href=\"horspool-boyer-moore#Horspool-算法\"></a></h1><h2 id=\"代码实现\">代码实现<a href=\"horspool-boyer-moore#代码实现\"></a></h2><h3 id=\"C-实现\">C++ 实现<a href=\"horspool-boyer-moore#C-实现\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShiftTable</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ShiftTable(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pattern) &#123;</span><br><span class=\"line\">        len = <span class=\"built_in\">strlen</span>(pattern);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            table[pattern[i]] =  len - <span class=\"number\">1</span> - i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (table.find(c) == table.end() ? len : table[c]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>[](<span class=\"keyword\">char</span> c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Get(c);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">HorspoolMatching</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pattern,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenPattern = <span class=\"built_in\">strlen</span>(pattern);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenText = <span class=\"built_in\">strlen</span>(text);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// text长度比pattern小时text必定不包含pattern</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lenText &lt; lenPattern) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建移动表</span></span><br><span class=\"line\">    <span class=\"function\">ShiftTable <span class=\"title\">table</span><span class=\"params\">(pattern)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = lenPattern - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; lenText) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt;= lenPattern - <span class=\"number\">1</span> &amp;&amp; pattern[lenPattern - <span class=\"number\">1</span> - k] == text[i - k]) &#123;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == lenPattern) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - lenPattern + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i += table[text[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; HorspoolMatching(<span class=\"string\">\"cde\"</span>, <span class=\"string\">\"abcdefg\"</span>) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Test();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"Boyer-Moore-算法\">Boyer-Moore 算法<a href=\"horspool-boyer-moore#Boyer-Moore-算法\"></a></h1><h2 id=\"代码实现-1\">代码实现<a href=\"horspool-boyer-moore#代码实现-1\"></a></h2><h3 id=\"C-实现-1\">C++ 实现<a href=\"horspool-boyer-moore#C-实现-1\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? b : a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShiftTable</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ShiftTable(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pattern) &#123;</span><br><span class=\"line\">        len = <span class=\"built_in\">strlen</span>(pattern);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            table[pattern[i]] =  len - <span class=\"number\">1</span> - i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (table.find(c) == table.end() ? len : table[c]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>[](<span class=\"keyword\">char</span> c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Get(c);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">int</span>&gt; table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BadSymbolShiftTable</span>:</span> <span class=\"keyword\">public</span> ShiftTable &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    BadSymbolShiftTable(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pattern): ShiftTable(pattern) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get</span><span class=\"params\">(<span class=\"keyword\">char</span> c, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Max(ShiftTable::Get(c) - k, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodSuffixShiftTable</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    GoodSuffixShiftTable(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pattern) &#123;</span><br><span class=\"line\">        len = <span class=\"built_in\">strlen</span>(pattern);</span><br><span class=\"line\">        table = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[len];</span><br><span class=\"line\">        </span><br><span class=\"line\">        table[<span class=\"number\">0</span>] = len;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span>* filpPattern = FlipString(pattern);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt; len; k++) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">char</span>* filpPostPattern = FlipString(&amp;pattern[len - k]);</span><br><span class=\"line\">            table[k] = HorspoolMatchingWithSuffix(filpPostPattern, &amp;filpPattern[<span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (table[k] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                table[k] = len;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] filpPostPattern;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] filpPattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~GoodSuffixShiftTable() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] table;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Get</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt;= k &lt; len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> table[k];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">\"GoodShuffixShiftTable index should be in [0, len).\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Get(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">FlipString</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(str);</span><br><span class=\"line\">        <span class=\"keyword\">char</span>* flipString = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            flipString[len - <span class=\"number\">1</span> - i] = str[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        flipString[len] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flipString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">HorspoolMatchingWithSuffix</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pattern,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lenPattern = <span class=\"built_in\">strlen</span>(pattern);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lenText = <span class=\"built_in\">strlen</span>(text);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// text长度比pattern小时text必定不包含pattern</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lenText &lt; lenPattern) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 构建移动表</span></span><br><span class=\"line\">        <span class=\"function\">ShiftTable <span class=\"title\">table</span><span class=\"params\">(pattern)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// text边界处只匹配pattern的前缀也判定为匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = lenPattern - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; lenText + lenPattern - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = Max(<span class=\"number\">0</span>, i - lenText + <span class=\"number\">1</span>); </span><br><span class=\"line\">            <span class=\"keyword\">while</span> (k &lt;= lenPattern - <span class=\"number\">1</span> &amp;&amp; pattern[lenPattern - <span class=\"number\">1</span> - k] == text[i - k]) &#123;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == Min(lenPattern, i + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i - lenPattern + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                i += table[text[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BoyerMooreMatching</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pattern,<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenPattern = <span class=\"built_in\">strlen</span>(pattern);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenText = <span class=\"built_in\">strlen</span>(text);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// text长度比pattern小时text必定不包含pattern</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lenText &lt; lenPattern) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构建移动表</span></span><br><span class=\"line\">    <span class=\"function\">BadSymbolShiftTable <span class=\"title\">d1</span><span class=\"params\">(pattern)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">GoodSuffixShiftTable <span class=\"title\">d2</span><span class=\"params\">(pattern)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = lenPattern - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; lenText) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt;= lenPattern - <span class=\"number\">1</span> &amp;&amp; pattern[lenPattern - <span class=\"number\">1</span> - k] == text[i - k]) &#123;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == lenPattern) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - lenPattern + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                i += d1.Get(text[i], k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                i += Max(d1.Get(text[i], k), d2.Get(k));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">GoodSuffixShiftTable <span class=\"title\">table</span><span class=\"params\">(<span class=\"string\">\"ABCBAB\"</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; table.Get(i) &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n-------------------\\n\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; BoyerMooreMatching(<span class=\"string\">\"efg\"</span>, <span class=\"string\">\"abcdefg\"</span>) &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Test();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"Pickle Python对象序列化","link":"pickle"},"next":{"title":"Support Vector Machine 支持向量机","link":"support-vecter-machine"},"plink":"https://yuxinzhao.net/horspool-boyer-moore/","toc":[{"title":"问题","id":"问题","index":"1"},{"title":"Horspool 算法","id":"Horspool-算法","index":"2","children":[{"title":"代码实现","id":"代码实现","index":"2.1","children":[{"title":"C++ 实现","id":"C-实现","index":"2.1.1"}]}]},{"title":"Boyer-Moore 算法","id":"Boyer-Moore-算法","index":"3","children":[{"title":"代码实现","id":"代码实现-1","index":"3.1","children":[{"title":"C++ 实现","id":"C-实现-1","index":"3.1.1"}]}]}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/horspool-boyer-moore/\" title=\"字符串匹配技术之 Horspool算法和Boyer-Moore算法\">https://yuxinzhao.net/horspool-boyer-moore/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}