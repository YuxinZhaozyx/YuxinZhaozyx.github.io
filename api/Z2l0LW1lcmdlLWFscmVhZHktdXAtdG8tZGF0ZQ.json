{"title":"git merge命令提示Already up to date","date":"2019-07-09T14:45:33.000Z","link":"git-merge-already-up-to-date","comments":true,"tags":["error","git"],"categories":["tools"],"updated":"2022-01-04T08:35:48.591Z","content":"<p>本文描述 <code>git merge &lt;branch&gt;</code> 提示 Already up to date 的错误原因及解决方法。</p>\n<a id=\"more\"></a>\n\n<p>假定我有两个分支<code>master</code>和<code>dev</code>。当前处在<code>dev</code>分支。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git merge master</span><br><span class=\"line\">Already up to date.</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Cause-of-Errors-错误原因\">Cause of Errors 错误原因<a href=\"git-merge-already-up-to-date#Cause-of-Errors-错误原因\"></a></h2><p><code>Already up to date</code>意味着已经是最新的了，即<code>dev</code>是在<code>master</code>的基础上修改的，而<code>master</code>自分出<code>dev</code>分支后就没修改过，因此<code>dev</code>分支是最新的，不需要于<code>master</code>合并，因为合并完的仓库和当前的<code>dev</code>分支是一模一样的。</p>\n<p>其git分支图如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                 E -- F -- G(dev)</span><br><span class=\"line\">                /</span><br><span class=\"line\">A -- B -- C -- D(master)</span><br></pre></td></tr></table></div></figure>\n\n<p>其等同于:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A -- B -- C -- D(master) -- E -- F -- G(dev)</span><br></pre></td></tr></table></div></figure>\n\n<p>我们想要做的合并实际上是将<code>master</code>指向<code>dev</code>而已。</p>\n<h2 id=\"Solution-解决方法\">Solution 解决方法<a href=\"git-merge-already-up-to-date#Solution-解决方法\"></a></h2><p>多提交一个空的<code>commit</code>，使两条分支叉开，再合并。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                 E -- F -- G(dev)</span><br><span class=\"line\">                /</span><br><span class=\"line\">A -- B -- C -- D -- H(master)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                 E -- F -- G(dev)</span><br><span class=\"line\">                /           \\</span><br><span class=\"line\">A -- B -- C -- D -- H ------ I(master)</span><br></pre></td></tr></table></div></figure>\n\n<p>上图中<code>H</code>是一个不做任何修改的提交，其作用是将<code>master</code>和<code>dev</code>分到两个叉开的分支上，使得<code>master</code>不再是<code>dev</code>的父节点。</p>\n<p><strong>具体命令:</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 移动到master分支下</span></span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\"><span class=\"comment\"># 在master提交一个空内容</span></span><br><span class=\"line\">$ git commit --allow-empty -m <span class=\"string\">\"ready for merging\"</span></span><br><span class=\"line\"><span class=\"comment\"># 合并master和dev分支</span></span><br><span class=\"line\">$ git merge dev</span><br><span class=\"line\"><span class=\"comment\"># 移除dev指针(可选)</span></span><br><span class=\"line\">$ git branch --delete dev</span><br></pre></td></tr></table></div></figure>","prev":{"title":"[论文笔记] Faster R-CNN: Towards Real-Time Object Detection With Region Proposal Networks","link":"faster-r-cnn"},"next":{"title":"[论文笔记] Two-Stream Convolutional Networks for Action Recognition in Videos","link":"two-stream-convolutional-network"},"plink":"https://yuxinzhao.net/git-merge-already-up-to-date/","toc":[{"title":"Cause of Errors 错误原因","id":"Cause-of-Errors-错误原因","index":"1"},{"title":"Solution 解决方法","id":"Solution-解决方法","index":"2"}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/git-merge-already-up-to-date/\" title=\"git merge命令提示Already up to date\">https://yuxinzhao.net/git-merge-already-up-to-date/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}