{"title":"[PyTorch学习笔记] What is PyTorch?","date":"2019-07-22T18:11:52.000Z","thumbnail":"/static/image/pytorch.png","link":"pytorch-learning-note-1","comments":true,"tags":["pytorch"],"categories":["machine-learning"],"updated":"2022-01-04T08:35:48.627Z","content":"<p>本文是PyTorch官方教程 [DEEP LEARNING WITH PYTORCH: A 60 MINUTE BLITZ] What is PyTorch? 的学习笔记</p>\n<a id=\"more\"></a>\n\n\n\n\n\n<h2 id=\"PyTorch-是什么\">PyTorch 是什么?<a href=\"pytorch-learning-note-1#PyTorch-是什么\"></a></h2><p>基于Python的科学计算包，服务于以下两种场景:</p>\n<ul>\n<li>作为NumPy的替代品，可以使用GPU的强大计算能力</li>\n<li>提供最大的灵活性和高速的深度学习研究平台</li>\n</ul>\n<h2 id=\"Tensor-张量\">Tensor 张量<a href=\"pytorch-learning-note-1#Tensor-张量\"></a></h2><p>Tensors与Numpy中的 ndarrays类似，但是在PyTorch中 Tensors 可以使用GPU进行计算.</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>创建一个  5x5 的矩阵，但未初始化:</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.empty(<span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([[<span class=\"number\">9.5511e-39</span>, <span class=\"number\">1.0102e-38</span>, <span class=\"number\">4.6837e-39</span>],</span><br><span class=\"line\">        [<span class=\"number\">4.9592e-39</span>, <span class=\"number\">5.0510e-39</span>, <span class=\"number\">9.9184e-39</span>],</span><br><span class=\"line\">        [<span class=\"number\">9.0000e-39</span>, <span class=\"number\">1.0561e-38</span>, <span class=\"number\">1.0653e-38</span>],</span><br><span class=\"line\">        [<span class=\"number\">4.1327e-39</span>, <span class=\"number\">8.9082e-39</span>, <span class=\"number\">9.8265e-39</span>],</span><br><span class=\"line\">        [<span class=\"number\">9.4592e-39</span>, <span class=\"number\">1.0561e-38</span>, <span class=\"number\">1.0653e-38</span>]])</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>创建一个随机初始化的矩阵:</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.rand(<span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([[<span class=\"number\">0.6004</span>, <span class=\"number\">0.9095</span>, <span class=\"number\">0.5525</span>],</span><br><span class=\"line\">        [<span class=\"number\">0.2870</span>, <span class=\"number\">0.2680</span>, <span class=\"number\">0.1937</span>],</span><br><span class=\"line\">        [<span class=\"number\">0.9153</span>, <span class=\"number\">0.0150</span>, <span class=\"number\">0.5165</span>],</span><br><span class=\"line\">        [<span class=\"number\">0.7875</span>, <span class=\"number\">0.7397</span>, <span class=\"number\">0.9305</span>],</span><br><span class=\"line\">        [<span class=\"number\">0.8575</span>, <span class=\"number\">0.1453</span>, <span class=\"number\">0.2655</span>]])</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>创建一个0填充的矩阵，数据类型为<code>long</code>:</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.zeros(<span class=\"number\">5</span>, <span class=\"number\">3</span>, dtype=torch.long)</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">        [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]])</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>创建tensor并使用现有数据初始化:</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.tensor([<span class=\"number\">5.5</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">print(x)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([<span class=\"number\">5.5000</span>, <span class=\"number\">3.0000</span>])</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>根据现有的张量创建张量</strong>。 这些方法将重用输入张量的属性，例如， dtype，除非设置新的值进行覆盖</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.tensor([<span class=\"number\">5.5</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">x = x.new_ones(<span class=\"number\">5</span>, <span class=\"number\">3</span>, dtype=torch.double)      <span class=\"comment\"># new_* 方法来创建对象</span></span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">x = torch.randn_like(x, dtype=torch.float)    <span class=\"comment\"># 覆盖 dtype!</span></span><br><span class=\"line\">print(x)                                      <span class=\"comment\">#  对象的size 是相同的，只是值和类型发生了变化</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([<span class=\"number\">5.5000</span>, <span class=\"number\">3.0000</span>])</span><br><span class=\"line\">tensor([[<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</span><br><span class=\"line\">        [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</span><br><span class=\"line\">        [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</span><br><span class=\"line\">        [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</span><br><span class=\"line\">        [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>]], dtype=torch.float64)</span><br><span class=\"line\">tensor([[<span class=\"number\">-0.5648</span>,  <span class=\"number\">1.4639</span>, <span class=\"number\">-0.1247</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0.4187</span>,  <span class=\"number\">0.0255</span>, <span class=\"number\">-0.0938</span>],</span><br><span class=\"line\">        [<span class=\"number\">-1.2237</span>,  <span class=\"number\">0.3889</span>,  <span class=\"number\">0.9847</span>],</span><br><span class=\"line\">        [<span class=\"number\">-0.2423</span>, <span class=\"number\">-3.3706</span>, <span class=\"number\">-0.3511</span>],</span><br><span class=\"line\">        [<span class=\"number\">-1.1498</span>, <span class=\"number\">-1.1044</span>,  <span class=\"number\">0.4582</span>]])</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"获取-size\">获取 size<a href=\"pytorch-learning-note-1#获取-size\"></a></h2><p>使用<code>size</code>方法与Numpy的<code>shape</code>属性返回的相同，张量也支持<code>shape</code>属性</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.ones(<span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"x.size(): \"</span>, x.size())</span><br><span class=\"line\">print(<span class=\"string\">\"x.shape:  \"</span>, x.shape)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([[<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</span><br><span class=\"line\">        [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</span><br><span class=\"line\">        [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</span><br><span class=\"line\">        [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>],</span><br><span class=\"line\">        [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>]])</span><br><span class=\"line\">x.size():  torch.Size([<span class=\"number\">5</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">x.shape:   torch.Size([<span class=\"number\">5</span>, <span class=\"number\">3</span>])</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p> <code>torch.Size()</code>返回值是<code>tuple</code>类型，所以它支持<code>tuple</code>类型的所有操作</p>\n</blockquote>\n<h2 id=\"基础类型\">基础类型<a href=\"pytorch-learning-note-1#基础类型\"></a></h2><h3 id=\"基本类型\">基本类型<a href=\"pytorch-learning-note-1#基本类型\"></a></h3><p>Tensor的基本数据类型有五种：</p>\n<ul>\n<li>32位浮点型：torch.FloatTensor。 (默认)</li>\n<li>64位整型：torch.LongTensor。</li>\n<li>32位整型：torch.IntTensor。</li>\n<li>16位整型：torch.ShortTensor。</li>\n<li>64位浮点型：torch.DoubleTensor。</li>\n</ul>\n<p>除以上数字类型外，还有 byte和chart型</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor = torch.tensor([<span class=\"number\">3.1433223</span>])  <span class=\"comment\"># tensor([3.1433])</span></span><br><span class=\"line\"></span><br><span class=\"line\">long = tensor.long()  <span class=\"comment\"># tensor([3])</span></span><br><span class=\"line\">half = tensor.half()  <span class=\"comment\"># tensor([3.1426], dtype=torch.float16)</span></span><br><span class=\"line\">int_t = tensor.int()  <span class=\"comment\"># tensor([3], dtype=torch.int32)</span></span><br><span class=\"line\">flo = tensor.float()  <span class=\"comment\"># tensor([3.1433])</span></span><br><span class=\"line\">short = tensor.short()  <span class=\"comment\"># tensor([3], dtype=torch.int16)</span></span><br><span class=\"line\">ch = tensor.char()  <span class=\"comment\"># tensor([3], dtype=torch.int8)</span></span><br><span class=\"line\">bt = tensor.byte()  <span class=\"comment\"># tensor([3], dtype=torch.uint8)</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Operation-操作\">Operation 操作<a href=\"pytorch-learning-note-1#Operation-操作\"></a></h2><h3 id=\"加法\">加法<a href=\"pytorch-learning-note-1#加法\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.rand(<span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">y = torch.rand(<span class=\"number\">5</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sum = x + y                 <span class=\"comment\"># 加法1，操作符</span></span><br><span class=\"line\">sum = torch.add(x, y)       <span class=\"comment\"># 加法2，函数</span></span><br><span class=\"line\">torch.add(x, y, out=sum)    <span class=\"comment\"># 加法3，提供输出张量sum作为参数</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"替换\">替换<a href=\"pytorch-learning-note-1#替换\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># add x to y</span></span><br><span class=\"line\">y.add_(x)</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>任何 以<code>_</code> 结尾的操作都会用结果替换原变量. 例如: <code>x.copy_(y)</code>, <code>x.t_()</code>, 都会改变 <code>x</code>.</p>\n</blockquote>\n<h3 id=\"截取\">截取<a href=\"pytorch-learning-note-1#截取\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(x[:, <span class=\"number\">1</span>])</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"view-reshape\">view / reshape<a href=\"pytorch-learning-note-1#view-reshape\"></a></h3><p><code>torch.view</code> 可以改变张量的维度和大小，与numpy的reshape类似</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.randn(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">y = x.view(<span class=\"number\">16</span>)</span><br><span class=\"line\">z = x.view(<span class=\"number\">-1</span>, <span class=\"number\">8</span>)  <span class=\"comment\">#  size -1 从其他维度推断</span></span><br><span class=\"line\">print(x.size(), y.size(), z.size())</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">torch.Size([<span class=\"number\">4</span>, <span class=\"number\">4</span>]) torch.Size([<span class=\"number\">16</span>]) torch.Size([<span class=\"number\">2</span>, <span class=\"number\">8</span>])</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"只有一个元素的张量取值\">只有一个元素的张量取值<a href=\"pytorch-learning-note-1#只有一个元素的张量取值\"></a></h3><p>如果你有只有一个元素的张量，使用<code>.item()</code>来得到Python数据类型的数值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.randn(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(x)</span><br><span class=\"line\">print(x.item())</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([<span class=\"number\">-0.2036</span>])</span><br><span class=\"line\"><span class=\"number\">-0.203627809882164</span></span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>更多操作<a href=\"https://pytorch.org/docs/stable/torch.html\" target=\"_blank\" rel=\"noopener\">点击此处</a></p>\n</blockquote>\n<h2 id=\"Numpy-转换\">Numpy 转换<a href=\"pytorch-learning-note-1#Numpy-转换\"></a></h2><p>Torch Tensor与NumPy数组<strong>共享底层内存地址</strong>，修改一个会导致另一个的变化。</p>\n<h3 id=\"Torch-Tensor-转换成-NumPy数组\">Torch Tensor 转换成 NumPy数组<a href=\"pytorch-learning-note-1#Torch-Tensor-转换成-NumPy数组\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = torch.ones(<span class=\"number\">5</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\">b = a.numpy()</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"></span><br><span class=\"line\">a.add_(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>])</span><br><span class=\"line\">[<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\">tensor([<span class=\"number\">2.</span>, <span class=\"number\">2.</span>, <span class=\"number\">2.</span>, <span class=\"number\">2.</span>, <span class=\"number\">2.</span>])</span><br><span class=\"line\">[<span class=\"number\">2.</span> <span class=\"number\">2.</span> <span class=\"number\">2.</span> <span class=\"number\">2.</span> <span class=\"number\">2.</span>]</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"NumPy数组-转换成-Torch-Tensor\">NumPy数组 转换成 Torch Tensor<a href=\"pytorch-learning-note-1#NumPy数组-转换成-Torch-Tensor\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.ones(<span class=\"number\">5</span>)</span><br><span class=\"line\">b = torch.from_numpy(a)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"></span><br><span class=\"line\">np.add(a, <span class=\"number\">1</span>, out=a)</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span> <span class=\"number\">1.</span>]</span><br><span class=\"line\">tensor([<span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>, <span class=\"number\">1.</span>], dtype=torch.float64)</span><br><span class=\"line\">[<span class=\"number\">2.</span> <span class=\"number\">2.</span> <span class=\"number\">2.</span> <span class=\"number\">2.</span> <span class=\"number\">2.</span>]</span><br><span class=\"line\">tensor([<span class=\"number\">2.</span>, <span class=\"number\">2.</span>, <span class=\"number\">2.</span>, <span class=\"number\">2.</span>, <span class=\"number\">2.</span>], dtype=torch.float64)</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>所有的 <code>Tensor</code> 类型默认都是基于CPU， <code>CharTensor</code> 类型不支持到 NumPy 的转换.</p>\n</blockquote>\n<h2 id=\"CUDA-张量\">CUDA 张量<a href=\"pytorch-learning-note-1#CUDA-张量\"></a></h2><p>使用<code>.to</code> 方法 可以将Tensor移动到任何设备中</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = torch.rand(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># is_available 函数判断是否有cuda可以使用</span></span><br><span class=\"line\"><span class=\"comment\"># torch.device 将张量移动到指定的设备中</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> torch.cuda.is_available():</span><br><span class=\"line\">    device = torch.device(<span class=\"string\">\"cuda\"</span>)          <span class=\"comment\"># a CUDA 设备对象</span></span><br><span class=\"line\">    y = torch.ones_like(x, device=device)  <span class=\"comment\"># 直接从GPU创建张量</span></span><br><span class=\"line\">    x = x.to(device)                       <span class=\"comment\"># 或者直接使用 .to(\"cuda\") 将张量移动到cuda中</span></span><br><span class=\"line\">    z = x + y</span><br><span class=\"line\">    print(z)</span><br><span class=\"line\">    print(z.to(<span class=\"string\">\"cpu\"</span>, torch.double))       <span class=\"comment\"># .to 也会对变量的类型做更改</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tensor([<span class=\"number\">1.2840</span>], device=<span class=\"string\">'cuda:0'</span>)</span><br><span class=\"line\">tensor([<span class=\"number\">1.2840</span>], dtype=torch.float64)</span><br></pre></td></tr></table></div></figure>\n\n<p>一般情况下可以使用<code>.cuda</code>方法和 <code>.cpu</code> 方法将tensor在cpu和gpu之间移动 （需要cuda设备支持）</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpu_a = torch.rand(<span class=\"number\">4</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">cpu_a.type()  <span class=\"comment\"># torch.FloatTensor</span></span><br><span class=\"line\"></span><br><span class=\"line\">gpu_a = cpu_a.cuda()</span><br><span class=\"line\">gpu_a.type()  <span class=\"comment\"># torch.cuda.FloatTensor</span></span><br><span class=\"line\"></span><br><span class=\"line\">cpu_b = gpu_a.cpu()</span><br><span class=\"line\">cpu_b.type()  <span class=\"comment\"># torch.FloatTensor</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"创建变量与结果变量\">创建变量与结果变量<a href=\"pytorch-learning-note-1#创建变量与结果变量\"></a></h2><p><code>.is_leaf</code>：记录是否是叶子节点。通过这个属性来确定这个变量的类型 在官方文档中所说的“graph leaves”,“leaf variables”，都是指像<code>x</code>,<code>y</code>这样的手动创建的、而非运算得到的变量，这些变量成为创建变量。 像<code>z</code>这样的，是通过计算后得到的结果称为结果变量。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"x.is_leaf=\"</span>+str(x.is_leaf))</span><br><span class=\"line\">print(<span class=\"string\">\"z.is_leaf=\"</span>+str(z.is_leaf))</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x.is_leaf=<span class=\"literal\">True</span></span><br><span class=\"line\">z.is_leaf=<span class=\"literal\">False</span></span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"[PyTorch学习笔记] AUTOGRAD: Automatic Differentiation","link":"pytorch-learning-note-2"},"next":{"title":"Windows PATH 长度限制最多2047个字符","link":"windows-path-limited-length"},"plink":"https://yuxinzhao.net/pytorch-learning-note-1/","toc":[{"title":"PyTorch 是什么?","id":"PyTorch-是什么","index":"1"},{"title":"Tensor 张量","id":"Tensor-张量","index":"2"},{"title":"获取 size","id":"获取-size","index":"3"},{"title":"基础类型","id":"基础类型","index":"4","children":[{"title":"基本类型","id":"基本类型","index":"4.1"}]},{"title":"Operation 操作","id":"Operation-操作","index":"5","children":[{"title":"加法","id":"加法","index":"5.1"},{"title":"替换","id":"替换","index":"5.2"},{"title":"截取","id":"截取","index":"5.3"},{"title":"view / reshape","id":"view-reshape","index":"5.4"},{"title":"只有一个元素的张量取值","id":"只有一个元素的张量取值","index":"5.5"}]},{"title":"Numpy 转换","id":"Numpy-转换","index":"6","children":[{"title":"Torch Tensor 转换成 NumPy数组","id":"Torch-Tensor-转换成-NumPy数组","index":"6.1"},{"title":"NumPy数组 转换成 Torch Tensor","id":"NumPy数组-转换成-Torch-Tensor","index":"6.2"}]},{"title":"CUDA 张量","id":"CUDA-张量","index":"7"},{"title":"创建变量与结果变量","id":"创建变量与结果变量","index":"8"}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/pytorch-learning-note-1/\" title=\"[PyTorch学习笔记] What is PyTorch?\">https://yuxinzhao.net/pytorch-learning-note-1/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}