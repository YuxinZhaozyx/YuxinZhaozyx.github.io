{"title":"Golang基础","date":"2019-10-02T16:48:16.000Z","link":"golang-basic","comments":true,"tags":["golang"],"categories":["programming-language"],"updated":"2022-01-04T08:35:48.595Z","content":"<p>本文是我学习 golang 时的笔记。</p>\n<a id=\"more\"></a>\n\n\n\n<h1 id=\"Go-package\">Go package<a href=\"golang-basic#Go-package\"></a></h1><p><code>package &lt;pkgName&gt;</code>（在我们的例子中是<code>package main</code>）这一行告诉我们当前文件属于哪个包，而包名<code>main</code>则告诉我们它是一个可独立运行的包，它在编译后会产生可执行文件。除了<code>main</code>包之外，其它的包最后都会生成<code>*.a</code>文件（也就是包文件）并放置在<code><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16.61ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 7151.5 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">GOPATH/pkg/</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-47\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-50\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-41\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-54\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-48\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2F\" d=\"M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-47\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"786\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-50\" x=\"1550\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"2301\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-54\" x=\"3052\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-48\" x=\"3756\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"4645\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"5145\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6B\" x=\"5649\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"6170\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2F\" x=\"6651\" y=\"0\"/>\n</g>\n</svg>GOOS_<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"33.37ex\" height=\"3.343ex\" style=\"vertical-align: -1.171ex;\" viewbox=\"0 -934.9 14367.6 1439.2\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">GOARCH`` 中（以Mac为例就是``</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-47\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-41\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-52\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-43\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-48\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2018\" d=\"M64 494Q64 548 86 597T131 670T160 694Q163 694 172 685T182 672Q182 669 170 656T144 625T116 573T101 501Q101 489 102 489T107 491T120 497T138 500Q163 500 180 483T198 440T181 397T139 379Q110 379 87 405T64 494Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4D\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-47\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"786\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-41\" x=\"1550\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-52\" x=\"2300\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-43\" x=\"3060\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-48\" x=\"3820\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"4709\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"4987\" y=\"0\"/>\n<g transform=\"translate(5266,0)\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">中</text>\n</g>\n<g transform=\"translate(6198,0)\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">（</text>\n</g>\n<g transform=\"translate(7131,0)\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">以</text>\n</g>\n <use xlink:href=\"#E1-MJMATHI-4D\" x=\"8064\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"9116\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"9645\" y=\"0\"/>\n<g transform=\"translate(10079,0)\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">为</text>\n</g>\n<g transform=\"translate(11011,0)\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">例</text>\n</g>\n<g transform=\"translate(11944,0)\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">就</text>\n</g>\n<g transform=\"translate(12877,0)\">\n<text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">是</text>\n</g>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"13810\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2018\" x=\"14089\" y=\"0\"/>\n</g>\n</svg>GOPATH/pkg/darwin_amd64</code>）。</p>\n<blockquote>\n<p>每一个可独立运行的Go程序，必定包含一个<code>package main</code>，在这个<code>main</code>包中必定包含一个入口函数<code>main</code>，而这个函数既没有参数，也没有返回值。</p>\n</blockquote>\n<blockquote>\n<p>包名和包所在的文件夹名可以是不同的，此处的<code>&lt;pkgName&gt;</code>即为通过<code>package &lt;pkgName&gt;</code>声明的包名，而非文件夹名</p>\n</blockquote>\n<h1 id=\"变量\">变量<a href=\"golang-basic#变量\"></a></h1><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> variablename <span class=\"keyword\">type</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vname1, vname2, vname3 <span class=\"keyword\">type</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> vname1, vname2, vname3 <span class=\"keyword\">type</span> = value1, value2, value3</span><br><span class=\"line\"><span class=\"keyword\">var</span> vname1, vname2, vname3 = value1, value2, value3</span><br><span class=\"line\">vname1, vname2, vname3 := value1, value2, value3 <span class=\"comment\">// 只能用在函数内部，局部变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span>(</span><br><span class=\"line\">   vname1 <span class=\"keyword\">type</span></span><br><span class=\"line\">   vname2 <span class=\"keyword\">type</span></span><br><span class=\"line\">) <span class=\"comment\">// 只能用在函数外，全局变量</span></span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"常量\">常量<a href=\"golang-basic#常量\"></a></h1><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> constantName <span class=\"keyword\">type</span> = value</span><br><span class=\"line\"><span class=\"keyword\">const</span> constantName = value</span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">\tname1 = value1</span><br><span class=\"line\">    name2 = value2</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"内置基础类型\">内置基础类型<a href=\"golang-basic#内置基础类型\"></a></h1><h2 id=\"数值类型\">数值类型<a href=\"golang-basic#数值类型\"></a></h2><p><code>int</code>, <code>float</code>,<code>uint</code>, <code>rune</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>和<code>byte</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>，<code>complex32</code>, <code>complex64</code>。</p>\n<p>其中，<code>rune</code>是<code>int32</code>的别称，<code>byte</code>是<code>uint8</code>的别称。</p>\n<blockquote>\n<p>注意： 不同类型之间不能互相赋值或操作，否则编译错误</p>\n<p>如<code>int8</code>,  <code>int32</code>不能互相赋值或相加等</p>\n<p>另外，尽管int的长度是32 bit, 但int 与 int32并不可以互用。</p>\n</blockquote>\n<h2 id=\"字符串\">字符串<a href=\"golang-basic#字符串\"></a></h2><p>Go中的字符串都是采用<code>UTF-8</code>字符集编码。字符串是用一对双引号（<code>&quot;&quot;</code>）或反引号（<code>` `</code> ）括起来定义，它的类型是<code>string</code>。</p>\n<p>在Go中字符串是不可变的.</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m := <span class=\"string\">`hello</span></span><br><span class=\"line\"><span class=\"string\">\tworld`</span></span><br></pre></td></tr></table></div></figure>\n\n<p><code>`</code> 括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出。</p>\n<h2 id=\"错误类型\">错误类型<a href=\"golang-basic#错误类型\"></a></h2><p>Go内置有一个<code>error</code>类型，专门用来处理错误信息，Go的<code>package</code>里面还专门有一个包<code>errors</code>来处理错误：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := errors.New(<span class=\"string\">\"emit macho dwarf: elf header corrupted\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\tfmt.Print(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"iota枚举\">iota枚举<a href=\"golang-basic#iota枚举\"></a></h2><p>Go里面有一个关键字<code>iota</code>，这个关键字用来声明<code>enum</code>的时候采用，它默认开始值是0，const中每增加一行加1：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\tx = iota // x == 0</span><br><span class=\"line\">\ty = iota // y == 1</span><br><span class=\"line\">\tz = iota // z == 2</span><br><span class=\"line\">\tw        // 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用&quot;= iota&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const v = iota // 每遇到一个const关键字，iota就会重置，此时v == 0</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\th, i, j = iota, iota, iota //h=0,i=0,j=0 iota在同一行值相同</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\ta       = iota //a=0</span><br><span class=\"line\">\tb       = &quot;B&quot;</span><br><span class=\"line\">\tc       = iota             //c=2</span><br><span class=\"line\">\td, e, f = iota, iota, iota //d=3,e=3,f=3</span><br><span class=\"line\">\tg       = iota             //g = 4</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tfmt.Println(a, b, c, d, e, f, g, h, i, j, x, y, z, w, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>除非被显式设置为其它值或<code>iota</code>，每个<code>const</code>分组的第一个常量被默认设置为它的0值，第二及后续的常量被默认设置为它前面那个常量的值，如果前面那个常量的值是<code>iota</code>，则它也被设置为<code>iota</code>。</p>\n</blockquote>\n<h2 id=\"公有与私有\">公有与私有<a href=\"golang-basic#公有与私有\"></a></h2><ul>\n<li>大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。</li>\n<li>大写字母开头的函数也是一样，相当于<code>class</code>中的带<code>public</code>关键词的公有函数；小写字母开头的就是有<code>private</code>关键词的私有函数。</li>\n</ul>\n<h2 id=\"数组array\">数组array<a href=\"golang-basic#数组array\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr [<span class=\"number\">10</span>]<span class=\"keyword\">int</span>  <span class=\"comment\">// 声明了一个int类型的数组</span></span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">42</span>      <span class=\"comment\">// 数组下标是从0开始的</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">13</span>      <span class=\"comment\">// 赋值操作</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"The first element is %d\\n\"</span>, arr[<span class=\"number\">0</span>])  <span class=\"comment\">// 获取数据，返回42</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"The last element is %d\\n\"</span>, arr[<span class=\"number\">9</span>]) <span class=\"comment\">//返回未赋值的最后一个元素，默认返回0</span></span><br></pre></td></tr></table></div></figure>\n\n<p>由于长度也是数组类型的一部分，因此<code>[3]int</code>与<code>[4]int</code>是不同的类型，数组也就不能改变长度。数组之间的赋值是值的赋值，即<strong>当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针</strong>。如果要使用指针，那么就需要用到后面介绍的<code>slice</code>类型了。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := [<span class=\"number\">3</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; <span class=\"comment\">// 声明了一个长度为3的int数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">b := [<span class=\"number\">10</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; <span class=\"comment\">// 声明了一个长度为10的int数组，其中前三个元素初始化为1、2、3，其它默认为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">c := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; <span class=\"comment\">// 可以省略长度而采用`...`的方式，Go会自动根据元素个数来计算长度</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"多维数组\">多维数组<a href=\"golang-basic#多维数组\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明了一个二维数组，该数组以两个数组作为元素，其中每个数组中又有4个int类型的元素</span></span><br><span class=\"line\">doubleArray := [<span class=\"number\">2</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;[<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;, [<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面的声明可以简化，直接忽略内部的类型</span></span><br><span class=\"line\">easyArray := [<span class=\"number\">2</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Print(doubleArray[<span class=\"number\">1</span>][<span class=\"number\">3</span>])</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"切片slice\">切片slice<a href=\"golang-basic#切片slice\"></a></h2><p><code>slice</code>并不是真正意义上的动态数组，而是一个引用类型。<code>slice</code>总是指向一个底层<code>array</code>，<code>slice</code>的声明也可以像<code>array</code>一样，只是不需要长度。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fslice []<span class=\"keyword\">int</span> <span class=\"comment\">// 和声明array一样，只是少了长度</span></span><br><span class=\"line\">slice := []<span class=\"keyword\">byte</span> &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个含有10个元素元素类型为byte的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ar = [<span class=\"number\">10</span>]<span class=\"keyword\">byte</span> &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'g'</span>, <span class=\"string\">'h'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'j'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明两个含有byte的slice</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a, b []<span class=\"keyword\">byte</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a指向数组的第3个元素开始，并到第五个元素结束，</span></span><br><span class=\"line\">a = ar[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">//现在a含有的元素: ar[2]、ar[3]和ar[4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b是数组ar的另一个slice</span></span><br><span class=\"line\">b = ar[<span class=\"number\">3</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">// b的元素是：ar[3]和ar[4]</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a_slice []<span class=\"keyword\">int</span></span><br><span class=\"line\">a_slice = a[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"len(a)=\"</span>, <span class=\"built_in\">len</span>(a), <span class=\"string\">\", len(a_slice)=\"</span>, <span class=\"built_in\">len</span>(a_slice)) <span class=\"comment\">// 长度</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"cap(a)=\"</span>, <span class=\"built_in\">cap</span>(a), <span class=\"string\">\", cap(a_slice)=\"</span>, <span class=\"built_in\">cap</span>(a_slice)) <span class=\"comment\">// 容量，切片指向数组上切片的左端到数组的最右端</span></span><br><span class=\"line\"></span><br><span class=\"line\">b_slice := <span class=\"built_in\">append</span>(a_slice, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// b_slice = [7 8 1 2 3]  a = [6, 7, 8, 9, 10] 插入的值比超过了容量，不对源切片指向数组进行修改，而是新建一个新的</span></span><br><span class=\"line\">fmt.Println(b_slice)</span><br><span class=\"line\">fmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">c_slice := <span class=\"built_in\">append</span>(a_slice, <span class=\"number\">1</span>, <span class=\"number\">2</span>)    <span class=\"comment\">// c_slice = [7 8 1 2]    a = [6, 7, 8, 1, 2]  插入的值比容量小，对指向数组进行修改</span></span><br><span class=\"line\">fmt.Println(c_slice)</span><br><span class=\"line\">fmt.Println(a)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">5</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a_slice []<span class=\"keyword\">int</span></span><br><span class=\"line\">a_slice = a[<span class=\"number\">1</span>:<span class=\"number\">3</span>:<span class=\"number\">4</span>] <span class=\"comment\">// 多增加一个4，使得len=3-1=2，但cap=4-1=3</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"映射map\">映射map<a href=\"golang-basic#映射map\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个key是字符串，值为int的字典,这种方式的声明需要在使用之前使用make初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"comment\">// 另一种map的声明方式</span></span><br><span class=\"line\">numbers = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">numbers[<span class=\"string\">\"one\"</span>] = <span class=\"number\">1</span>  <span class=\"comment\">//赋值</span></span><br><span class=\"line\">numbers[<span class=\"string\">\"ten\"</span>] = <span class=\"number\">10</span> <span class=\"comment\">//赋值</span></span><br><span class=\"line\">numbers[<span class=\"string\">\"three\"</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"第三个数字是: \"</span>, numbers[<span class=\"string\">\"three\"</span>]) <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\"><span class=\"comment\">// 打印出来如:第三个数字是: 3</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>内置的<code>len</code>函数同样适用于<code>map</code>，返回<code>map</code>拥有的<code>key</code>的数量</li>\n<li><code>map</code>和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化一个字典</span></span><br><span class=\"line\">rating := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">float32</span>&#123;<span class=\"string\">\"C\"</span>:<span class=\"number\">5</span>, <span class=\"string\">\"Go\"</span>:<span class=\"number\">4.5</span>, <span class=\"string\">\"Python\"</span>:<span class=\"number\">4.5</span>, <span class=\"string\">\"C++\"</span>:<span class=\"number\">2</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// map有两个返回值，第二个返回值，如果不存在key，那么ok为false，如果存在ok为true</span></span><br><span class=\"line\">csharpRating, ok := rating[<span class=\"string\">\"C#\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"C# is in the map and its rating is \"</span>, csharpRating)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"We have no rating associated with C# in the map\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">delete</span>(rating, <span class=\"string\">\"C\"</span>)  <span class=\"comment\">// 删除key为C的元素</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"make-amp-new\">make &amp; new<a href=\"golang-basic#make-amp-new\"></a></h2><p><code>make</code>用于内建类型（<code>map</code>、<code>slice</code> 和<code>channel</code>）的内存分配。<code>new</code>用于各种类型的内存分配。</p>\n<p>内建函数<code>new</code>本质上说跟其它语言中的同名函数功能一样：<code>new(T)</code>分配了零值填充的<code>T</code>类型的内存空间，并且返回其地址，即一个<code>*T</code>类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型<code>T</code>的零值。有一点非常重要：</p>\n<blockquote>\n<p><code>new</code>返回指针。</p>\n</blockquote>\n<p>内建函数<code>make(T, args)</code>与<code>new(T)</code>有着不同的功能，make只能创建<code>slice</code>、<code>map</code>和<code>channel</code>，并且返回一个有初始值(非零)的<code>T</code>类型，而不是<code>*T</code>。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。例如，一个<code>slice</code>，是一个包含指向数据（内部<code>array</code>）的指针、长度和容量的三项描述符；在这些项目被初始化之前，<code>slice</code>为<code>nil</code>。对于<code>slice</code>、<code>map</code>和<code>channel</code>来说，<code>make</code>初始化了内部的数据结构，填充适当的值。</p>\n<blockquote>\n<p><code>make</code>返回初始化后的（非零）值。</p>\n</blockquote>\n<p>结构：<code>new(Point)</code></p>\n<p>切片slice: <code>make([]byte, 2, 6)</code> // len=2， cap=6</p>\n<h2 id=\"零值\">零值<a href=\"golang-basic#零值\"></a></h2><p>关于“零值”，所指并非是空值，而是一种“变量未填充前”的默认值，通常为0。 此处罗列 部分类型 的 “零值”</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>     <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">int8</span>    <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">int32</span>   <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">int64</span>   <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">uint</span>    <span class=\"number\">0x0</span></span><br><span class=\"line\"><span class=\"keyword\">rune</span>    <span class=\"number\">0</span> <span class=\"comment\">//rune的实际类型是 int32</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>    <span class=\"number\">0x0</span> <span class=\"comment\">// byte的实际类型是 uint8</span></span><br><span class=\"line\"><span class=\"keyword\">float32</span> <span class=\"number\">0</span> <span class=\"comment\">//长度为 4 byte</span></span><br><span class=\"line\"><span class=\"keyword\">float64</span> <span class=\"number\">0</span> <span class=\"comment\">//长度为 8 byte</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span>    <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">string</span>  <span class=\"string\">\"\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"流程管理\">流程管理<a href=\"golang-basic#流程管理\"></a></h1><h2 id=\"if\">if<a href=\"golang-basic#if\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"x is greater than 10\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> x &lt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"x is less than 1\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"x is between 1 and 10\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> x := <span class=\"number\">1</span>; x &lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"x &lt; 2\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"goto\">goto<a href=\"golang-basic#goto\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFunc</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">Here:   <span class=\"comment\">//这行的第一个词，以冒号结束作为标签</span></span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(i)</span><br><span class=\"line\">\ti++</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> Here   <span class=\"comment\">//跳转到Here去</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>标签名是大小写敏感的。</p>\n</blockquote>\n<h2 id=\"for\">for<a href=\"golang-basic#for\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> expression1; expression2; expression3 &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum := <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> index:=<span class=\"number\">0</span>; index &lt; <span class=\"number\">10</span> ; index++ &#123;</span><br><span class=\"line\">    sum += index</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"sum is equal to \"</span>, sum)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum := <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> sum &lt; <span class=\"number\">1000</span> &#123;</span><br><span class=\"line\">\tsum += sum</span><br><span class=\"line\">&#125; <span class=\"comment\">// 相当于while循环</span></span><br></pre></td></tr></table></div></figure>\n\n<p>支持<code>break</code>, <code>continue</code></p>\n<p><code>for</code>配合<code>range</code>可以用于读取<code>slice</code>和<code>map</code>的数据：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k,v:=<span class=\"keyword\">range</span> <span class=\"keyword\">map</span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"map's key:\"</span>,k)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"map's val:\"</span>,v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> index, value := <span class=\"keyword\">range</span> slice &#123;</span><br><span class=\"line\">\tfmt.Println(index, <span class=\"string\">\" - \"</span>, value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以用`_`丢弃不需要的值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> <span class=\"keyword\">map</span>&#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"map's val:\"</span>, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"switch\">switch<a href=\"golang-basic#switch\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> sExpr &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> expr1:</span><br><span class=\"line\">\tsome instructions</span><br><span class=\"line\"><span class=\"keyword\">case</span> expr2:</span><br><span class=\"line\">\tsome other instructions</span><br><span class=\"line\"><span class=\"keyword\">case</span> expr3:</span><br><span class=\"line\">\tsome other instructions</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\tother code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d, e := <span class=\"number\">2</span>, <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> d &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>: <span class=\"comment\">// 多情况</span></span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"one or three or five\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span> + e: <span class=\"comment\">// 不必是常量</span></span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"two\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"unknown\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>不需要加break，默认找到后执行完后跳出，不会执行后面的语句</p>\n<p>可以使用<code>fallthrough</code>强制执行后面的case代码</p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">integer := <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> integer &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The integer was &lt;= 4\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The integer was &lt;= 5\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The integer was &lt;= 6\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The integer was &lt;= 7\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"The integer was &lt;= 8\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">fallthrough</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"default case\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> x.(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">type</span>:</span><br><span class=\"line\">       statement(s);      </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">type</span>:</span><br><span class=\"line\">       statement(s); </span><br><span class=\"line\">    <span class=\"comment\">/* 你可以定义任意个数的case */</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"comment\">/* 可选 */</span></span><br><span class=\"line\">       statement(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"函数\">函数<a href=\"golang-basic#函数\"></a></h1><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName</span><span class=\"params\">(input1 type1, input2 type2)</span> <span class=\"params\">(output1 type1, output2 type2)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//这里是处理逻辑代码</span></span><br><span class=\"line\">\t<span class=\"comment\">//返回多个值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value1, value2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">max</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt; b &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">x := <span class=\"number\">3</span></span><br><span class=\"line\">y := <span class=\"number\">4</span></span><br><span class=\"line\">max_xy = max(x, y)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SumAndProduct</span><span class=\"params\">(A, B <span class=\"keyword\">int</span>)</span> <span class=\"params\">(add <span class=\"keyword\">int</span>, Multiplied <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tadd = A+B</span><br><span class=\"line\">\tMultiplied = A*B</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"变参-不定参数\">变参/不定参数<a href=\"golang-basic#变参-不定参数\"></a></h2><p>Go函数支持变参。接受变参的函数是有着不定数量的参数的。为了做到这点，首先需要定义函数使其接受变参：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myfunc</span><span class=\"params\">(arg ...<span class=\"keyword\">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><code>arg ...int</code>告诉Go这个函数接受不定数量的参数。注意，这些参数的类型全部是<code>int</code>。在函数体中，变量<code>arg</code>是一个<code>int</code>的<code>slice</code>：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _, n := <span class=\"keyword\">range</span> arg &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"And the number is: %d\\n\"</span>, n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"传值与传指针\">传值与传指针<a href=\"golang-basic#传值与传指针\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swap_val</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttemp := a</span><br><span class=\"line\">\ta = b</span><br><span class=\"line\">\tb = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swap_ptr</span><span class=\"params\">(a, b *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttemp := *a</span><br><span class=\"line\">\t*a = *b</span><br><span class=\"line\">\t*b = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">a, b := <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">swap_val(a, b)    <span class=\"comment\">// a=1, b=2</span></span><br><span class=\"line\">swap_ptr(&amp;a, &amp;b)  <span class=\"comment\">// a=2, b=1</span></span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>Go语言中<code>channel</code>，<code>slice</code>，<code>map</code>这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变<code>slice</code>的长度，则仍需要取地址传递指针）</p>\n</blockquote>\n<h2 id=\"延迟defer\">延迟defer<a href=\"golang-basic#延迟defer\"></a></h2><p>Go语言中有种不错的设计，即延迟（defer）语句，你可以在函数中添加多个defer语句。当函数执行到最后时，这些defer语句会按照逆序执行，最后该函数返回。特别是当你在进行一些打开资源的操作时，遇到错误需要提前返回，在返回前你需要关闭相应的资源，不然很容易造成资源泄露等问题。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadWrite</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\tfile.Open(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> file.Close()\\</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> failureX &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> failureY &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在<code>defer</code>后指定的函数会在函数退出前调用。如果有很多调用<code>defer</code>，那么<code>defer</code>是采用后进先出模式.</p>\n<h2 id=\"函数作为值、类型\">函数作为值、类型<a href=\"golang-basic#函数作为值、类型\"></a></h2><p>在Go中函数也是一种变量，我们可以通过<code>type</code>来定义它，它的类型就是所有拥有相同的参数，相同的返回值的一种类型</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> typeName <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(input1 inputType1 , input2 inputType2 [, ...])</span> <span class=\"params\">(result1 resultType1 [, ...])</span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> testInt <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span> // 声明了一个函数类型</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">isOdd</span><span class=\"params\">(integer <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> integer%<span class=\"number\">2</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isEven</span><span class=\"params\">(integer <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> integer%<span class=\"number\">2</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明的函数类型在这个地方当做了一个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">filter</span><span class=\"params\">(slice []<span class=\"keyword\">int</span>, f testInt)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> result []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> slice &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f(value) &#123;</span><br><span class=\"line\">\t\t\tresult = <span class=\"built_in\">append</span>(result, value)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tslice := []<span class=\"keyword\">int</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"slice = \"</span>, slice)</span><br><span class=\"line\">\todd := filter(slice, isOdd)    <span class=\"comment\">// 函数当做值来传递了</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Odd elements of slice are: \"</span>, odd)</span><br><span class=\"line\">\teven := filter(slice, isEven)  <span class=\"comment\">// 函数当做值来传递了</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Even elements of slice are: \"</span>, even)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Panic-和-Recover\">Panic 和 Recover<a href=\"golang-basic#Panic-和-Recover\"></a></h2><p>Go没有像Java那样的异常机制，它不能抛出异常，而是使用了<code>panic</code>和<code>recover</code>机制。一定要记住，你应当把它作为最后的手段来使用，也就是说，你的代码中应当没有，或者很少有<code>panic</code>的东西。这是个强大的工具，请明智地使用它。</p>\n<p>Panic</p>\n<blockquote>\n<p>是一个内建函数，可以中断原有的控制流程，进入一个<code>panic</code>状态中。当函数<code>F</code>调用<code>panic</code>，函数F的执行被中断，但是<code>F</code>中的延迟函数会正常执行，然后F返回到调用它的地方。在调用的地方，<code>F</code>的行为就像调用了<code>panic</code>。这一过程继续向上，直到发生<code>panic</code>的<code>goroutine</code>中所有调用的函数返回，此时程序退出。<code>panic</code>可以直接调用<code>panic</code>产生。也可以由运行时错误产生，例如访问越界的数组。</p>\n</blockquote>\n<p>Recover</p>\n<blockquote>\n<p>是一个内建的函数，可以让进入<code>panic</code>状态的<code>goroutine</code>恢复过来。<code>recover</code>仅在延迟函数中有效。在正常的执行过程中，调用<code>recover</code>会返回<code>nil</code>，并且没有其它任何效果。如果当前的<code>goroutine</code>陷入<code>panic</code>状态，调用<code>recover</code>可以捕获到<code>panic</code>的输入值，并且恢复正常的执行。</p>\n<p>下面这个函数演示了如何在过程中使用<code>panic</code></p>\n</blockquote>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> user = os.Getenv(<span class=\"string\">\"USER\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> user == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"no value for $USER\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>下面这个函数检查作为其参数的函数在执行时是否会产生<code>panic</code>：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">throwsPanic</span><span class=\"params\">(f <span class=\"keyword\">func</span>()</span>) <span class=\"params\">(b <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> x := <span class=\"built_in\">recover</span>(); x != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tb = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tf() <span class=\"comment\">//执行函数f，如果f中出现了panic，那么就可以恢复回来</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"main函数和init函数\"><code>main</code>函数和<code>init</code>函数<a href=\"golang-basic#main函数和init函数\"></a></h2><p>Go里面有两个保留的函数：<code>init</code>函数（能够应用于所有的<code>package</code>）和<code>main</code>函数（只能应用于<code>package main</code>）。这两个函数在定义时不能有任何的参数和返回值。虽然一个<code>package</code>里面可以写任意多个<code>init</code>函数，但这无论是对于可读性还是以后的可维护性来说，我们都强烈建议用户在一个<code>package</code>中每个文件只写一个<code>init</code>函数。</p>\n<p>Go程序会自动调用<code>init()</code>和<code>main()</code>，所以你不需要在任何地方调用这两个函数。每个<code>package</code>中的<code>init</code>函数都是可选的，但<code>package main</code>就必须包含一个<code>main</code>函数。</p>\n<p>程序的初始化和执行都起始于<code>main</code>包。如果<code>main</code>包还导入了其它的包，那么就会在编译时将它们依次导入。有时一个包会被多个包同时导入，那么它只会被导入一次（例如很多包可能都会用到<code>fmt</code>包，但它只会被导入一次，因为没有必要导入多次）。当一个包被导入时，如果该包还导入了其它的包，那么会先将其它包导入进来，然后再对这些包中的包级常量和变量进行初始化，接着执行<code>init</code>函数（如果有的话），依次类推。等所有被导入的包都加载完毕了，就会开始对<code>main</code>包中的包级常量和变量进行初始化，然后执行<code>main</code>包中的<code>init</code>函数（如果存在的话），最后执行<code>main</code>函数。下图详细地解释了整个执行过程：</p>\n<p><img src=\"golang-basic/2.3.init.png\" alt=\"2.3.init\" class=\"article-img\"></p>\n<h1 id=\"import\">import<a href=\"golang-basic#import\"></a></h1><p>我们在写Go代码的时候经常用到import这个命令用来导入包文件，而我们经常看到的方式参考如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import(</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>然后我们代码里面可以通过如下的方式调用</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(&quot;hello world&quot;)</span><br></pre></td></tr></table></div></figure>\n\n<p>上面这个fmt是Go语言的标准库，其实是去<code>GOROOT</code>环境变量指定目录下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：</p>\n<ol>\n<li><strong>相对路径</strong></li>\n</ol>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> “./model” <span class=\"comment\">//当前文件同一目录的model目录，但是不建议这种方式来import</span></span><br></pre></td></tr></table></div></figure>\n\n<ol start=\"2\">\n<li><strong>绝对路径</strong></li>\n</ol>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> “shorturl/model” <span class=\"comment\">//加载gopath/src/shorturl/model模块</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面展示了一些import常用的几种方式，但是还有一些特殊的import，让很多新手很费解，下面我们来一一讲解一下到底是怎么一回事</p>\n<ol>\n<li><p><strong>点操作</strong></p>\n<p>我们有时候会看到如下的方式导入包</p>\n</li>\n</ol>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">    . <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>   这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，也就是前面你调用的fmt.Println(“hello world”)可以省略的写成Println(“hello world”)</p>\n<ol start=\"2\">\n<li><p><strong>别名操作</strong></p>\n<p>别名操作顾名思义我们可以把包命名成另一个我们用起来容易记忆的名字</p>\n</li>\n</ol>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">    f <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>   别名操作的话调用包函数时前缀变成了我们的前缀，即f.Println(“hello world”)</p>\n<ol start=\"3\">\n<li><p><strong>_操作</strong></p>\n<p>这个操作经常是让很多人费解的一个操作符，请看下面这个import</p>\n</li>\n</ol>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"database/sql\"</span></span><br><span class=\"line\">    _ <span class=\"string\">\"github.com/ziutek/mymysql/godrv\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p>​        _操作其实是引入该包，而不直接使用包里面的函数，而是调用了该包里面的init函数。</p>\n<h1 id=\"struct类型\">struct类型<a href=\"golang-basic#struct类型\"></a></h1><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> P person  <span class=\"comment\">// P现在就是person类型的变量了</span></span><br><span class=\"line\"></span><br><span class=\"line\">P.name = <span class=\"string\">\"Astaxie\"</span>  <span class=\"comment\">// 赋值\"Astaxie\"给P的name属性.</span></span><br><span class=\"line\">P.age = <span class=\"number\">25</span>  <span class=\"comment\">// 赋值\"25\"给变量P的age属性</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"The person's name is %s\"</span>, P.name)  <span class=\"comment\">// 访问P的name属性.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他声明方式</span></span><br><span class=\"line\">P := person&#123;<span class=\"string\">\"Tom\"</span>, <span class=\"number\">25</span>&#125;             <span class=\"comment\">// P 为 person </span></span><br><span class=\"line\">P := person&#123;age:<span class=\"number\">24</span>, name:<span class=\"string\">\"Tom\"</span>&#125;    <span class=\"comment\">// P 为 person 若在包外，age和name都是私有的，无法访问，没法用这种方式赋值</span></span><br><span class=\"line\">P := <span class=\"built_in\">new</span>(person)\t\t\t\t   <span class=\"comment\">// P 为 *person</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"struct的匿名字段\">struct的匿名字段<a href=\"golang-basic#struct的匿名字段\"></a></h2><p>我们上面介绍了如何定义一个struct，定义的时候是字段名与其类型一一对应，实际上Go支持只提供类型，而不写字段名的方式，也就是匿名字段，也称为嵌入字段。</p>\n<p>当匿名字段是一个struct的时候，那么这个struct所拥有的全部字段都被隐式地引入了当前定义的这个struct。</p>\n<p>让我们来看一个例子，让上面说的这些更具体化</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">\tweight <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tHuman  <span class=\"comment\">// 匿名字段，那么默认Student就包含了Human的所有字段</span></span><br><span class=\"line\">\tspeciality <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 我们初始化一个学生</span></span><br><span class=\"line\">\tmark := Student&#123;Human&#123;<span class=\"string\">\"Mark\"</span>, <span class=\"number\">25</span>, <span class=\"number\">120</span>&#125;, <span class=\"string\">\"Computer Science\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 我们访问相应的字段</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"His name is \"</span>, mark.name)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"His age is \"</span>, mark.age)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"His weight is \"</span>, mark.weight)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"His speciality is \"</span>, mark.speciality)</span><br><span class=\"line\">\t<span class=\"comment\">// 修改对应的备注信息</span></span><br><span class=\"line\">\tmark.speciality = <span class=\"string\">\"AI\"</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Mark changed his speciality\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"His speciality is \"</span>, mark.speciality)</span><br><span class=\"line\">\t<span class=\"comment\">// 修改他的年龄信息</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Mark become old\"</span>)</span><br><span class=\"line\">\tmark.age = <span class=\"number\">46</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"His age is\"</span>, mark.age)</span><br><span class=\"line\">\t<span class=\"comment\">// 修改他的体重信息</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Mark is not an athlet anymore\"</span>)</span><br><span class=\"line\">\tmark.weight += <span class=\"number\">60</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"His weight is\"</span>, mark.weight)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">mark.Human = Human&#123;<span class=\"string\">\"Marcus\"</span>, <span class=\"number\">55</span>, <span class=\"number\">220</span>&#125;</span><br><span class=\"line\">mark.Human.age -= <span class=\"number\">1</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过匿名访问和修改字段相当的有用，但是不仅仅是struct字段哦，所有的内置类型和自定义类型都是可以作为匿名字段的。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Skills []<span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">\tweight <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tHuman  <span class=\"comment\">// 匿名字段，struct</span></span><br><span class=\"line\">\tSkills <span class=\"comment\">// 匿名字段，自定义的类型string slice</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>    <span class=\"comment\">// 内置类型作为匿名字段</span></span><br><span class=\"line\">\tspeciality <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"方法继承\">方法继承<a href=\"golang-basic#方法继承\"></a></h3><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Base <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SubA <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tBase</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> SubB <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tBase</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基类的Do方法，由于SubB类包含了它的匿名字段，相当于继承，因此SubB相当于继承了这个方法，可以直接调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(bb *Base)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"in Base\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重写Base类的Do方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(sa *SubA)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">\"in SubA\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj := Base&#123;&#125;</span><br><span class=\"line\">obj.Do() <span class=\"comment\">// Base.Do()</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj = SubA&#123;&#125;</span><br><span class=\"line\">obj.Do() <span class=\"comment\">// SubA.Do()</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj = SubB&#123;&#125;</span><br><span class=\"line\">obj.Do() <span class=\"comment\">// Base.Do()</span></span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"接口interface\">接口interface<a href=\"golang-basic#接口interface\"></a></h1><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tgetName() <span class=\"keyword\">string</span></span><br><span class=\"line\">\tsetName(name <span class=\"keyword\">string</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Student)</span> <span class=\"title\">getName</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s.name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Student)</span> <span class=\"title\">setName</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\ts.name = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person Person</span><br><span class=\"line\">person = <span class=\"built_in\">new</span>(Student)</span><br><span class=\"line\">person.setName(<span class=\"string\">\"Tom\"</span>)</span><br><span class=\"line\">name := person.getName()</span><br><span class=\"line\"><span class=\"built_in\">println</span>(name)</span><br></pre></td></tr></table></div></figure>\n\n<p>所有的类型都都实现了空interface即<code>interface{}</code>，因此可以用<code>interface{}</code>表示任意类型。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义a为空接口</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"keyword\">int</span> = <span class=\"number\">5</span></span><br><span class=\"line\">s := <span class=\"string\">\"Hello world\"</span></span><br><span class=\"line\"><span class=\"comment\">// a可以存储任意类型的数值</span></span><br><span class=\"line\">a = i</span><br><span class=\"line\">a = s</span><br></pre></td></tr></table></div></figure>\n\n<p><code>fmt.Print</code>使用了接口<code>Stringer</code>，只要实现<code>String()</code>方法，即可让结构直接用<code>fmt</code>打印。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Stringer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t String() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Human <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"keyword\">string</span></span><br><span class=\"line\">    age <span class=\"keyword\">int</span></span><br><span class=\"line\">    phone <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(h Human)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span> + name + <span class=\"string\">\", \"</span> + <span class=\"keyword\">string</span>(age) + <span class=\"string\">\", \"</span> + phone + <span class=\"string\">\")\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Bob := Human&#123;<span class=\"string\">\"Bob\"</span>, <span class=\"number\">39</span>, <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\">fmt.Println(Bob)</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"判断interface变量存储的类型\">判断interface变量存储的类型<a href=\"golang-basic#判断interface变量存储的类型\"></a></h2><p>Comma-ok断言</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value, ok = element.(T)</span><br></pre></td></tr></table></div></figure>\n\n<p>value就是变量的值，ok是一个bool类型，element是interface变量，T是断言的类型。如果element里面确实存储了T类型的数值，那么ok返回true，否则返回false。</p>\n<h3 id=\"嵌入interface\">嵌入interface<a href=\"golang-basic#嵌入interface\"></a></h3><p>Go里面真正吸引人的是它内置的逻辑语法，就像我们在学习Struct时学习的匿名字段，多么的优雅啊，那么相同的逻辑引入到interface里面，那不是更加完美了。如果一个interface1作为interface2的一个嵌入字段，那么interface2隐式的包含了interface1里面的method。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Interface1 <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Interface2 <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Interface1</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ReadWriter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tReader</span><br><span class=\"line\">\tWriter</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"反射reflect\">反射reflect<a href=\"golang-basic#反射reflect\"></a></h1><p>Go语言实现了反射，所谓反射就是能检查程序在运行时的状态。我们一般用到的包是reflect包。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t := reflect.TypeOf(i)    <span class=\"comment\">//得到类型的元数据,通过t我们能获取类型定义里面的所有元素</span></span><br><span class=\"line\">v := reflect.ValueOf(i)   <span class=\"comment\">//得到实际的值，通过v我们获取存储在里面的值，还可以去改变值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">tag := t.Elem().Field(<span class=\"number\">0</span>).Tag  <span class=\"comment\">//获取定义在struct里面的标签</span></span><br><span class=\"line\">name := v.Elem().Field(<span class=\"number\">0</span>).String()  <span class=\"comment\">//获取存储在第一个字段里面的值</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type:\"</span>, v.Type())</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"kind is float64:\"</span>, v.Kind() == reflect.Float64)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"value:\"</span>, v.Float())</span><br></pre></td></tr></table></div></figure>\n\n<p>对反射字段的修改</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">p := reflect.ValueOf(&amp;x)</span><br><span class=\"line\">v := p.Elem()</span><br><span class=\"line\">v.SetFloat(<span class=\"number\">7.1</span>)</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"并发\">并发<a href=\"golang-basic#并发\"></a></h1><h2 id=\"goroutine\">goroutine<a href=\"golang-basic#goroutine\"></a></h2><p>goroutine是Go并行设计的核心。goroutine说到底其实就是协程，但是它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部帮你实现了这些goroutine之间的内存共享。执行goroutine只需极少的栈内存(大概是4~5KB)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务。goroutine比thread更易用、更高效、更轻便。</p>\n<p>goroutine是通过Go的runtime管理的一个线程管理器。goroutine通过<code>go</code>关键字实现了，其实就是一个普通的函数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> hello(a, b, c)</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"runtime\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\truntime.Gosched()</span><br><span class=\"line\">\t\tfmt.Println(s)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> say(<span class=\"string\">\"world\"</span>) <span class=\"comment\">//开一个新的Goroutines执行</span></span><br><span class=\"line\">\tsay(<span class=\"string\">\"hello\"</span>) <span class=\"comment\">//当前Goroutines执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上程序执行后将输出：</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面的多个goroutine运行在同一个进程里面，共享内存数据，不过设计上我们要遵循：不要通过共享来通信，而要通过通信来共享。</p>\n<blockquote>\n<p>runtime.Gosched()表示让CPU把时间片让给别人,下次某个时候继续恢复执行该goroutine。</p>\n</blockquote>\n<blockquote>\n<p>默认情况下，在Go 1.5将标识并发系统线程个数的runtime.GOMAXPROCS的初始值由1改为了运行环境的CPU核数。</p>\n</blockquote>\n<h2 id=\"通道channel\">通道channel<a href=\"golang-basic#通道channel\"></a></h2><p>goroutine运行在相同的地址空间，因此访问共享内存必须做好同步。那么goroutine之间如何进行数据的通信呢，Go提供了一个很好的通信机制channel。channel可以与Unix shell 中的双向管道做类比：可以通过它发送或者接收值。这些值只能是特定的类型：channel类型。定义一个channel时，也需要定义发送到channel的值的类型。注意，必须使用make 创建channel：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ci := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">cs := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">cf := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">interface</span>&#123;&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>channel通过操作符<code>&lt;-</code>来接收和发送数据</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch &lt;- v    <span class=\"comment\">// 发送v到channel ch.</span></span><br><span class=\"line\">v := &lt;-ch  <span class=\"comment\">// 从ch中接收数据，并赋值给v</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum_chan</span><span class=\"params\">(a []<span class=\"keyword\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\ttotal := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\">\t\ttotal += v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc &lt;- total  <span class=\"comment\">// send total to c</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">-9</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> sum_chan(a[:<span class=\"built_in\">len</span>(a)/<span class=\"number\">2</span>], c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> sum_chan(a[<span class=\"built_in\">len</span>(a)/<span class=\"number\">2</span>:], c)</span><br><span class=\"line\">\tx, y := &lt;-c, &lt;-c  <span class=\"comment\">// receive from c</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(x, y, x + y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>默认情况下，channel接收和发送数据都是阻塞的，除非另一端已经准备好，这样就使得Goroutines 同步变的更加的简单，而不需要显式的lock。所谓阻塞，也就是如果读取（<code>value := &lt;-ch</code>）它将会被阻塞，直到有数据接收。其次，任何发送（<code>ch&lt;-5</code>）将会被阻塞，直到数据被读出。无缓冲channel是在多个goroutine之间同步很棒的工具。</p>\n<h3 id=\"Buffered-Channel\">Buffered Channel<a href=\"golang-basic#Buffered-Channel\"></a></h3><p>上面我们介绍了默认的非缓存类型的channel，不过Go也允许指定channel的缓冲大小，很简单，就是channel可以存储多少元素。ch:= make(chan bool, 4)，创建了可以存储4个元素的bool 型channel。在这个channel 中，前4个元素可以无阻塞的写入。当写入第5个元素时，代码将会阻塞，直到其他goroutine从channel 中读取一些元素，腾出空间。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch := make(chan type, value)</span><br></pre></td></tr></table></div></figure>\n\n<p>当 value = 0 时，channel 是无缓冲阻塞读写的，当value &gt; 0 时，channel 有缓冲、是非阻塞的，直到写满 value 个元素才阻塞写入。</p>\n<p>我们看一下下面这个例子，你可以在自己本机测试一下，修改相应的value值</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">2</span>)<span class=\"comment\">//修改2为1就报错，修改2为3可以正常运行</span></span><br><span class=\"line\">\tc &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">\tc &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(&lt;-c)</span><br><span class=\"line\">\tfmt.Println(&lt;-c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        <span class=\"comment\">//修改为1报如下的错误:</span></span><br><span class=\"line\">        <span class=\"comment\">//fatal error: all goroutines are asleep - deadlock!</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"Range和Close\">Range和Close<a href=\"golang-basic#Range和Close\"></a></h3><p>上面这个例子中，我们需要读取两次c，这样不是很方便，Go考虑到了这一点，所以也可以通过range，像操作slice或者map一样操作缓存类型的channel，请看下面的例子</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"keyword\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">1</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tc &lt;- x</span><br><span class=\"line\">\t\tx, y = y, x + y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fibonacci(<span class=\"built_in\">cap</span>(c), c)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> c &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><code>for i := range c</code>能够不断的读取channel里面的数据，直到该channel被显式的关闭。上面代码我们看到可以显式的关闭channel，生产者通过内置函数<code>close</code>关闭channel。关闭channel之后就无法再发送任何数据了，在消费方可以通过语法<code>v, ok := &lt;-ch</code>测试channel是否被关闭。如果ok返回false，那么说明channel已经没有任何数据并且已经被关闭。必须<code>close(c)</code></p>\n<blockquote>\n<p>记住应该<strong>在生产者的地方关闭channel</strong>，而不是消费的地方去关闭它，这样容易引起panic</p>\n</blockquote>\n<blockquote>\n<p>另外记住一点的就是channel不像文件之类的，不需要经常去关闭，只有当你确实没有任何发送数据了，或者你想显式的结束range循环之类的</p>\n</blockquote>\n<h3 id=\"Select\">Select<a href=\"golang-basic#Select\"></a></h3><p>我们上面介绍的都是只有一个channel的情况，那么如果存在多个channel的时候，我们该如何操作呢，Go里面提供了一个关键字<code>select</code>，通过<code>select</code>可以监听channel上的数据流动。</p>\n<p><code>select</code>默认是阻塞的，只有当监听的channel中有发送或接收可以进行时才会运行，当多个channel都准备好的时候，select是随机的选择一个执行的。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func fibonacci(c, quit chan int) &#123;</span><br><span class=\"line\">\tx, y := 1, 1</span><br><span class=\"line\">\tfor &#123;</span><br><span class=\"line\">\t\tselect &#123;</span><br><span class=\"line\">\t\tcase c &lt;- x:</span><br><span class=\"line\">\t\t\tx, y = y, x + y</span><br><span class=\"line\">\t\tcase &lt;-quit:</span><br><span class=\"line\">\t\t\tfmt.Println(&quot;quit&quot;)</span><br><span class=\"line\">\t\t\treturn</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tc := make(chan int)</span><br><span class=\"line\">\tquit := make(chan int)</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tfor i := 0; i &lt; 10; i++ &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(&lt;-c)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tquit &lt;- 0</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfibonacci(c, quit)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>在<code>select</code>里面还有default语法，<code>select</code>其实就是类似switch的功能，default就是当监听的channel都没有准备好的时候，默认执行的（select不再阻塞等待channel）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select &#123;</span><br><span class=\"line\">case i := &lt;-c:</span><br><span class=\"line\">\t// use i</span><br><span class=\"line\">default:</span><br><span class=\"line\">\t// 当c阻塞的时候执行这里</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"超时\">超时<a href=\"golang-basic#超时\"></a></h3><p>有时候会出现goroutine阻塞的情况，那么我们如何避免整个程序进入阻塞的情况呢？我们可以利用select来设置超时，通过如下的方式实现：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\to := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> v := &lt;- c:</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">println</span>(v)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> &lt;- time.After(<span class=\"number\">5</span> * time.Second):</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">println</span>(<span class=\"string\">\"timeout\"</span>)</span><br><span class=\"line\">\t\t\t\t\to &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t&lt;- o</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"runtime-goroutine\">runtime goroutine<a href=\"golang-basic#runtime-goroutine\"></a></h2><p>runtime包中有几个处理goroutine的函数：</p>\n<ul>\n<li><p>Goexit</p>\n<p>退出当前执行的goroutine，但是defer函数还会继续调用</p>\n</li>\n<li><p>Gosched</p>\n<p>让出当前goroutine的执行权限，调度器安排其他等待的任务运行，并在下次某个时候从该位置恢复执行。</p>\n</li>\n<li><p>NumCPU</p>\n<p>返回 CPU 核数量</p>\n</li>\n<li><p>NumGoroutine</p>\n<p>返回正在执行和排队的任务总数</p>\n</li>\n<li><p>GOMAXPROCS</p>\n<p>用来设置可以并行计算的CPU核数的最大值，并返回之前的值。</p>\n</li>\n</ul>\n<h1 id=\"Test测试方法\">Test测试方法<a href=\"golang-basic#Test测试方法\"></a></h1><p><code>go test</code> <code>go test -v</code></p>\n<ul>\n<li>test文件的命名为<code>xxx_test.go</code>。前面的<code>xxx</code>最好是要测试的文件的名称，但没有强制要求。</li>\n<li>必须<code>import &quot;testing&quot;</code>。</li>\n<li>test文件下的每一个test case 都必须以Test开头并且符合TestXXX的形式，否则go test会直接跳过不执行。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Print1to20</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">20</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">210</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestPrint</span><span class=\"params\">(t *testing.T)</span></span> &#123; <span class=\"comment\">// 测试函数名必须以Test开头， 参数必须是 *testing.T</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tresult := Print1to20()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> result == <span class=\"number\">210</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">\"Wrong\\n\"</span>) <span class=\"comment\">// 打印错误信息并且当前test case会被跳过</span></span><br><span class=\"line\">\t\tt.SkipNow()         <span class=\"comment\">// 加这个否则会继续往后执行</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"test - done\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestForSubtest</span><span class=\"params\">(t *testing.T)</span></span> &#123; <span class=\"comment\">// 使用子测试, 能够保证顺序输出</span></span><br><span class=\"line\">\tt.Run(<span class=\"string\">\"a1\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123; fmt.Println(<span class=\"string\">\"a1\"</span>) &#125;)</span><br><span class=\"line\">\tt.Run(<span class=\"string\">\"a2\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123; fmt.Println(<span class=\"string\">\"a2\"</span>) &#125;)</span><br><span class=\"line\">\tt.Run(<span class=\"string\">\"a3\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *testing.T)</span></span> &#123; fmt.Println(<span class=\"string\">\"a3\"</span>) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMain</span><span class=\"params\">(m *testing.M)</span></span> &#123; <span class=\"comment\">// TestMain最先初始化，总是第一个被调用</span></span><br><span class=\"line\">\t<span class=\"comment\">// 当没有添加TestMain函数时，会自动调用其他的test函数，但当添加TestMain函数后需要手动调用m.Run()调用其他test函数</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"test main first\"</span>)</span><br><span class=\"line\">\tm.Run() <span class=\"comment\">// 调用其他test</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"benchmark\">benchmark<a href=\"golang-basic#benchmark\"></a></h2><p><code>go test -bench=.</code></p>\n<ul>\n<li>benchmark函数以Benchmark开头</li>\n<li>benchmark的case一般会跑b.N次，并且每次执行都会如此</li>\n<li>在执行过程中会根据实际case的执行时间是否稳定会增加b.N的次数以达到稳态</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BenchmarkAll</span><span class=\"params\">(b *testing.B)</span></span> &#123; <span class=\"comment\">// 函数名以Benchmark开头，参数为 *testing.B</span></span><br><span class=\"line\">\t<span class=\"comment\">// 若TestMain中不加m.Run()则无法执行</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; b.N; i++ &#123;</span><br><span class=\"line\">\t\tPrint1to20()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"Docker基础","link":"docker-basic"},"next":{"title":"Post for Testing","link":"post-for-test"},"plink":"https://yuxinzhao.net/golang-basic/","toc":[{"title":"Go package","id":"Go-package","index":"1"},{"title":"变量","id":"变量","index":"2"},{"title":"常量","id":"常量","index":"3"},{"title":"内置基础类型","id":"内置基础类型","index":"4","children":[{"title":"数值类型","id":"数值类型","index":"4.1"},{"title":"字符串","id":"字符串","index":"4.2"},{"title":"错误类型","id":"错误类型","index":"4.3"},{"title":"iota枚举","id":"iota枚举","index":"4.4"},{"title":"公有与私有","id":"公有与私有","index":"4.5"},{"title":"数组array","id":"数组array","index":"4.6","children":[{"title":"多维数组","id":"多维数组","index":"4.6.1"}]},{"title":"切片slice","id":"切片slice","index":"4.7"},{"title":"映射map","id":"映射map","index":"4.8"},{"title":"make &amp; new","id":"make-amp-new","index":"4.9"},{"title":"零值","id":"零值","index":"4.10"}]},{"title":"流程管理","id":"流程管理","index":"5","children":[{"title":"if","id":"if","index":"5.1"},{"title":"goto","id":"goto","index":"5.2"},{"title":"for","id":"for","index":"5.3"},{"title":"switch","id":"switch","index":"5.4"}]},{"title":"函数","id":"函数","index":"6","children":[{"title":"变参/不定参数","id":"变参-不定参数","index":"6.1"},{"title":"传值与传指针","id":"传值与传指针","index":"6.2"},{"title":"延迟defer","id":"延迟defer","index":"6.3"},{"title":"函数作为值、类型","id":"函数作为值、类型","index":"6.4"},{"title":"Panic 和 Recover","id":"Panic-和-Recover","index":"6.5"},{"title":"<code>main</code>函数和<code>init</code>函数","id":"main函数和init函数","index":"6.6"}]},{"title":"import","id":"import","index":"7"},{"title":"struct类型","id":"struct类型","index":"8","children":[{"title":"struct的匿名字段","id":"struct的匿名字段","index":"8.1","children":[{"title":"方法继承","id":"方法继承","index":"8.1.1"}]}]},{"title":"接口interface","id":"接口interface","index":"9","children":[{"title":"判断interface变量存储的类型","id":"判断interface变量存储的类型","index":"9.1","children":[{"title":"嵌入interface","id":"嵌入interface","index":"9.1.1"}]}]},{"title":"反射reflect","id":"反射reflect","index":"10"},{"title":"并发","id":"并发","index":"11","children":[{"title":"goroutine","id":"goroutine","index":"11.1"},{"title":"通道channel","id":"通道channel","index":"11.2","children":[{"title":"Buffered Channel","id":"Buffered-Channel","index":"11.2.1"},{"title":"Range和Close","id":"Range和Close","index":"11.2.2"},{"title":"Select","id":"Select","index":"11.2.3"},{"title":"超时","id":"超时","index":"11.2.4"}]},{"title":"runtime goroutine","id":"runtime-goroutine","index":"11.3"}]},{"title":"Test测试方法","id":"Test测试方法","index":"12","children":[{"title":"benchmark","id":"benchmark","index":"12.1"}]}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/golang-basic/\" title=\"Golang基础\">https://yuxinzhao.net/golang-basic/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}