{"title":"python的奇妙技巧","date":"2020-01-12T14:47:26.000Z","thumbnail":"python-skill/python.jpg","link":"python-skill","comments":true,"tags":["numpy","python","pytorch"],"categories":["programming-language"],"updated":"2022-01-04T08:35:48.627Z","content":"<p>本文记录平时阅读大牛的python项目代码时看到的一些奇妙的技巧， 同时也记录一些常用(boring)的技巧，持续更新中…</p>\n<p>本文涉及的技巧除了纯python的技巧，还包含以下常用python库的技巧：</p>\n<ul>\n<li>numpy</li>\n<li>pytorch</li>\n<li>multiprocessing</li>\n</ul>\n<a id=\"more\"></a>\n\n\n\n<h1 id=\"numpy\">numpy<a href=\"python-skill#numpy\"></a></h1><h2 id=\"反转-numpy-array-某一维度\">反转 numpy array 某一维度<a href=\"python-skill#反转-numpy-array-某一维度\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = np.random.rand(<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">A = A[:,:,::<span class=\"number\">-1</span>]  <span class=\"comment\"># 反转第三维度</span></span><br><span class=\"line\">A = A[:,::<span class=\"number\">-1</span>,:]  <span class=\"comment\"># 反转第二维度</span></span><br></pre></td></tr></table></div></figure>\n\n<p>该方法可以用于：</p>\n<ul>\n<li>反转图像通道RGB到BGR</li>\n<li>反转图像x，y轴</li>\n</ul>\n<p>该方法同样使用于 pytorch, tensorflow 等库</p>\n<h2 id=\"numpy-array-与-python-list-的相互转换\">numpy array 与 python list 的相互转换<a href=\"python-skill#numpy-array-与-python-list-的相互转换\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python_list = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]]         <span class=\"comment\"># a python list</span></span><br><span class=\"line\">numpy_array = np.array(python_list)     <span class=\"comment\"># list --&gt; array</span></span><br><span class=\"line\">numpy_array = np.asarray(python_list)   <span class=\"comment\"># list --&gt; array</span></span><br><span class=\"line\">python_list = numpy_array.tolist()      <span class=\"comment\"># array --&gt; list</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"np-where-向量化-if-else-结构\"><code>np.where()</code> 向量化 if-else 结构<a href=\"python-skill#np-where-向量化-if-else-结构\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = np.array([<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])</span><br><span class=\"line\">B = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\">C = np.array([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>])</span><br></pre></td></tr></table></div></figure>\n\n<p>对于上述数组，假设我们想要实现以下逻辑：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(A.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> A[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        D[i] = B[i]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        D[i] = C[i]</span><br></pre></td></tr></table></div></figure>\n\n<p>使用 <code>np.where()</code> 可以向量化上述过程：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D = np.where(A % <span class=\"number\">2</span> == <span class=\"number\">0</span>, B, C)</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"np-select-向量化-if-elif-else-结构\"><code>np.select()</code> 向量化 if-elif-else 结构<a href=\"python-skill#np-select-向量化-if-elif-else-结构\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = np.array([<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br></pre></td></tr></table></div></figure>\n\n<p>假设我们想实现以下逻辑：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(A.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> A[i] % <span class=\"number\">4</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        B[i] = <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> A[i] % <span class=\"number\">3</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        B[i] = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> A[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        B[i] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        B[i] = <span class=\"number\">1</span></span><br></pre></td></tr></table></div></figure>\n\n<p>使用 <code>np.select()</code> 可以向量化上述过程：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conditions = [</span><br><span class=\"line\">    A % <span class=\"number\">4</span> == <span class=\"number\">0</span>,</span><br><span class=\"line\">    A % <span class=\"number\">3</span> == <span class=\"number\">0</span>,</span><br><span class=\"line\">    A % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">choices = [</span><br><span class=\"line\">    <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">B = np.select(conditions, choices, default = <span class=\"number\">1</span>)</span><br></pre></td></tr></table></div></figure>\n\n<p>对于嵌套的 if-elif-else 结构，我们依然可以用 <code>np.select</code> 将其向量化，如：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(A.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> A[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> A[i] &lt;= <span class=\"number\">4</span>:</span><br><span class=\"line\">            B[i] = <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> A[i] &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">            B[i] = <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            B[i] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> A[i] % <span class=\"number\">3</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        B[i] = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> A[i] % <span class=\"number\">4</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        B[i] = <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        B[i] = <span class=\"number\">1</span></span><br></pre></td></tr></table></div></figure>\n\n<p>可以将其向量化为以下形式：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conditions = [</span><br><span class=\"line\">    ((A % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (A &lt;= <span class=\"number\">4</span>)),</span><br><span class=\"line\">    ((A % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (A &gt; <span class=\"number\">8</span>)),</span><br><span class=\"line\">    A % <span class=\"number\">2</span> == <span class=\"number\">0</span>，</span><br><span class=\"line\">    A % <span class=\"number\">3</span> == <span class=\"number\">0</span>,</span><br><span class=\"line\">    A % <span class=\"number\">4</span> == <span class=\"number\">0</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">choices = [</span><br><span class=\"line\">    <span class=\"number\">4</span>,</span><br><span class=\"line\">    <span class=\"number\">8</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"number\">4</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">B = np.select(conditions, choices, default = <span class=\"number\">1</span>)</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"np-vectorize-向量化普通-python-函数\"><code>np.vectorize()</code> 向量化普通 python 函数<a href=\"python-skill#np-vectorize-向量化普通-python-函数\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = np.array([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\">B = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">python_func</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b - a</span><br></pre></td></tr></table></div></figure>\n\n<p>假设我们想实现的逻辑如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(A.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">    C[i] = python_func(A[i], B[i])</span><br></pre></td></tr></table></div></figure>\n\n<p>该过程可以用 <code>np.vectorize()</code> 向量化：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec_func = np.vectorize(python_func)</span><br><span class=\"line\">C = vec_func(A, B)</span><br></pre></td></tr></table></div></figure>\n\n<p><code>np.vectorize()</code> 将python函数向量化后可以达到 C 语言循环的速度。</p>\n<h2 id=\"根据条件修改图片中满足条件的像素值\">根据条件修改图片中满足条件的像素值<a href=\"python-skill#根据条件修改图片中满足条件的像素值\"></a></h2><p>假定我们想将RGB图片中R大于180且B大于200的的像素点的数值改成R=180,G=190,B=200。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(img.shape)  <span class=\"comment\"># (512,512,3)</span></span><br><span class=\"line\"></span><br><span class=\"line\">img = np.where(np.repeat(np.bitwise_and(img[:,:,<span class=\"number\">0</span>] &gt; <span class=\"number\">180</span>, img[:,:,<span class=\"number\">2</span>] &gt; <span class=\"number\">200</span>)[:,:,<span class=\"literal\">None</span>], <span class=\"number\">3</span>, axis=<span class=\"number\">2</span>), np.array([<span class=\"number\">180</span>,<span class=\"number\">190</span>,<span class=\"number\">200</span>], dtype=np.uint8).reshape(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>), img)</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"pytorch\">pytorch<a href=\"python-skill#pytorch\"></a></h1><h2 id=\"torch-tensor-与-python-list-的相互转换\">torch tensor 与 python list 的相互转换<a href=\"python-skill#torch-tensor-与-python-list-的相互转换\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python_list = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]]           <span class=\"comment\"># a python list</span></span><br><span class=\"line\">torch_tensor = torch.Tensor(python_list)  <span class=\"comment\"># list --&gt; tensor</span></span><br><span class=\"line\">python_list = torch_tensor.tolist()       <span class=\"comment\"># tensor --&gt; list</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"torch-tensor-与-numpy-array-的相互转换\">torch tensor 与 numpy array 的相互转换<a href=\"python-skill#torch-tensor-与-numpy-array-的相互转换\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numpy_array = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]])     <span class=\"comment\"># a numpy array</span></span><br><span class=\"line\">torch_tensor = torch.from_numpy(numpy_array)  <span class=\"comment\"># array --&gt; tensor</span></span><br><span class=\"line\">numpy_array = torch_tensor.numpy()            <span class=\"comment\"># tensor --&gt; array</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>注意：</strong> 以上转换共用一个内存，即改变其中一个的值，另一个也会改变。</p>\n<h1 id=\"multiprocessing\">multiprocessing<a href=\"python-skill#multiprocessing\"></a></h1><h2 id=\"多进程加速\">多进程加速<a href=\"python-skill#多进程加速\"></a></h2><p>对于某些需要处理大批量数据的函数，可以通过将数据拆分后在多个CPU上并行执行进行加速：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parallel_apply</span><span class=\"params\">(data, func, num_cores=<span class=\"number\">4</span>)</span>:</span></span><br><span class=\"line\">    data_split = np.array_split(data, num_cores)</span><br><span class=\"line\">    pool = Pool(num_cores)</span><br><span class=\"line\">    data = np.concatenate(pool.map(func, data_split))</span><br><span class=\"line\">    pool.close()</span><br><span class=\"line\">    pool.join()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"Ubuntu上从CUDA开始构建深度学习镜像","link":"create-deep-learning-docker-image-in-ubuntu"},"next":{"title":"PASCAL VOC 数据集格式","link":"pascal-voc-dataset-format"},"plink":"https://yuxinzhao.net/python-skill/","toc":[{"title":"numpy","id":"numpy","index":"1","children":[{"title":"反转 numpy array 某一维度","id":"反转-numpy-array-某一维度","index":"1.1"},{"title":"numpy array 与 python list 的相互转换","id":"numpy-array-与-python-list-的相互转换","index":"1.2"},{"title":"<code>np.where()</code> 向量化 if-else 结构","id":"np-where-向量化-if-else-结构","index":"1.3"},{"title":"<code>np.select()</code> 向量化 if-elif-else 结构","id":"np-select-向量化-if-elif-else-结构","index":"1.4"},{"title":"<code>np.vectorize()</code> 向量化普通 python 函数","id":"np-vectorize-向量化普通-python-函数","index":"1.5"},{"title":"根据条件修改图片中满足条件的像素值","id":"根据条件修改图片中满足条件的像素值","index":"1.6"}]},{"title":"pytorch","id":"pytorch","index":"2","children":[{"title":"torch tensor 与 python list 的相互转换","id":"torch-tensor-与-python-list-的相互转换","index":"2.1"},{"title":"torch tensor 与 numpy array 的相互转换","id":"torch-tensor-与-numpy-array-的相互转换","index":"2.2"}]},{"title":"multiprocessing","id":"multiprocessing","index":"3","children":[{"title":"多进程加速","id":"多进程加速","index":"3.1"}]}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/python-skill/\" title=\"python的奇妙技巧\">https://yuxinzhao.net/python-skill/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}