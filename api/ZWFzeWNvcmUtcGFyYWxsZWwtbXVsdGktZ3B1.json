{"title":"easycore多GPU并行加速","date":"2020-03-03T20:04:55.000Z","thumbnail":"easycore-parallel-multi-gpu/python.jpg","link":"easycore-parallel-multi-gpu","comments":true,"tags":["easycore","multiprocessing","python","pytorch"],"categories":["tools"],"updated":"2022-01-04T08:35:48.567Z","content":"<p>本文介绍如何使用easycore进行多GPU并行加速。</p>\n<a id=\"more\"></a>\n\n<p>上期<a href=\"/python-multi-gpu-multiprocessing\">“python多进程及pytorch多GPU并行推断”</a>我介绍如何使用python自带的<code>multiprocessing</code> 库进行加速的方案，该方案存在一定缺陷：</p>\n<ul>\n<li>在Windows下无法运行，仅支持fork模式。</li>\n<li>消费者传回数据量过大时无法成功传输。</li>\n</ul>\n<p>以上问题通过将消费者从进程改为线程后都得到了解决。</p>\n<p>我已将完整的代码封装进了我正在开发的一个工具库<a href=\"https://github.com/Yuxinzhaozyx/easycore\" target=\"_blank\" rel=\"noopener\">easycore</a>，欢迎star。项目文档见<a href=\"https://easycore.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">此处</a>，含API文档及教程。</p>\n<p>以下介绍如何使用我的工具库easycore进行多GPU并行加速：</p>\n<h2 id=\"安装easycore\">安装easycore<a href=\"easycore-parallel-multi-gpu#安装easycore\"></a></h2><figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install easycore==0.2.0</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>注：</strong> 0.2.0版本才加入多进程并行加速工具。</p>\n<p>国内可使用清华镜像加速：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple easycore==0.2.0</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"多进程加速API\">多进程加速API<a href=\"easycore-parallel-multi-gpu#多进程加速API\"></a></h2><p>多进程加速主要涉及<code>easycore.common.parallel.UnorderedRunner</code> 和<code>easycore.common.parallel.OrderedRunner</code>两个类，详细的API接口请参见<a href=\"https://easycore.readthedocs.io/en/latest/modules/easycore.common.parallel.html\" target=\"_blank\" rel=\"noopener\">API文档</a>。</p>\n<p>通过继承<code>UnorderedRunner</code>或<code>OrderedRunner</code>两个类，并重写以下六个类静态方法，可以自定义一个并行运行器。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_init</span><span class=\"params\">(device, cfg)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" </span></span><br><span class=\"line\"><span class=\"string\">    function for producer initialization.</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        device (str): device for the this process.</span></span><br><span class=\"line\"><span class=\"string\">        cfg (easycore.common.config.CfgNode): config of this process, you can use it to transfer data</span></span><br><span class=\"line\"><span class=\"string\">            to `producer_work` and `producer_end` function.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_work</span><span class=\"params\">(device, cfg, data)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" </span></span><br><span class=\"line\"><span class=\"string\">    function specify how the producer processes the data.</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        device (str): device for this process.</span></span><br><span class=\"line\"><span class=\"string\">        cfg (easycore.common.config.CfgNode): config of this process, you can use it to get data from</span></span><br><span class=\"line\"><span class=\"string\">            `producer_init` function and transfer data to the next `producer_work` and `producer_end`</span></span><br><span class=\"line\"><span class=\"string\">            function.</span></span><br><span class=\"line\"><span class=\"string\">        data (Any): data get from input of `__call__` method.</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        Any: processed data</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_end</span><span class=\"params\">(device, cfg)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" </span></span><br><span class=\"line\"><span class=\"string\">    function after finishing all of its task and before close the process.</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        device (str): device for this process.</span></span><br><span class=\"line\"><span class=\"string\">        cfg (easycore.common.config.CfgNode): config of this process, you can use it to get data</span></span><br><span class=\"line\"><span class=\"string\">            from `producer_init` and `producer_work` function.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_init</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    function for consumer initialization.</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        cfg (easycore.common.config.CfgNode): config of this process, you can use it to transfer data</span></span><br><span class=\"line\"><span class=\"string\">            to `consumer_work` and `consumer_end` function.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_work</span><span class=\"params\">(cfg, data)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    function specify how the consumer processses the data from producers.</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        cfg (easycore.common.config.CfgNode): config of this process, you can use it to get data from</span></span><br><span class=\"line\"><span class=\"string\">            `consumer_init` function and transfer data to the next `consumer_work` and `consumer_end`</span></span><br><span class=\"line\"><span class=\"string\">            function.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_end</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    function after receiving all data from producers.</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">        cfg (easycore.common.config.CfgNode): config of this process, you can use it get data from</span></span><br><span class=\"line\"><span class=\"string\">            `consumer_work` function.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        Any: processed data</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Example-1-平方和\">Example 1: 平方和<a href=\"easycore-parallel-multi-gpu#Example-1-平方和\"></a></h2><p>通常我们可以通过以下方法实现求平方和的功能：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_list = list(range(<span class=\"number\">100</span>))</span><br><span class=\"line\">result = sum([data * data <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> data_list])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># or more simple</span></span><br><span class=\"line\">result = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> data_list:</span><br><span class=\"line\">    square = data * data</span><br><span class=\"line\">    result += square</span><br></pre></td></tr></table></div></figure>\n\n<p>上述实现中，我们先计算了每个元素的平方，再将它们加到一起。在这种情况下，我们可以将它拆成两个任务分别分配给生产者和消费者，从而实现并行：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> easycore.common.config <span class=\"keyword\">import</span> CfgNode</span><br><span class=\"line\"><span class=\"keyword\">from</span> easycore.common.parallel <span class=\"keyword\">import</span> UnorderedRunner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span><span class=\"params\">(UnorderedRunner)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_work</span><span class=\"params\">(device, cfg, data)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data * data  <span class=\"comment\"># calculate square of data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_init</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">        cfg.sum = <span class=\"number\">0</span>  <span class=\"comment\"># init a sum variable with 0, you can use cfg to transfer data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_work</span><span class=\"params\">(cfg, data)</span>:</span></span><br><span class=\"line\">        cfg.sum += data  <span class=\"comment\"># add the square to the sum variable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_end</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cfg.sum  <span class=\"comment\"># return the result you need</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    runner = Runner(devices=<span class=\"number\">3</span>)  <span class=\"comment\"># if you specify `device with a integer`, it will use cpus.</span></span><br><span class=\"line\">    <span class=\"comment\"># You can specify a list of str instead, such as: </span></span><br><span class=\"line\">    <span class=\"comment\"># runner = Runner(devices=[\"cpu\", \"cpu\", \"cpu\"]) </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    data_list = list(range(<span class=\"number\">100</span>))  <span class=\"comment\"># prepare data, it must be iterable</span></span><br><span class=\"line\">    result = runner(data_list)  <span class=\"comment\"># call the runner</span></span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">    runner.close()  <span class=\"comment\"># close the runner and shutdown all processes it opens.</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Example-2-一个神经网络推断器\">Example 2: 一个神经网络推断器<a href=\"easycore-parallel-multi-gpu#Example-2-一个神经网络推断器\"></a></h2><p>我们先在 <code>network.py</code> 定义一个简单的神经网络:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn.functional <span class=\"keyword\">as</span> F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Net</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        super(Net, self).__init__()</span><br><span class=\"line\">        self.fc = nn.Linear(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        x = self.fc(x)</span><br><span class=\"line\">        x = F.relu(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></div></figure>\n\n<p>通过以下方法，可以将推断任务分配到四个GPU上:</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> easycore.common.config <span class=\"keyword\">import</span> CfgNode</span><br><span class=\"line\"><span class=\"keyword\">from</span> easycore.common.parallel <span class=\"keyword\">import</span> OrderedRunner</span><br><span class=\"line\"><span class=\"keyword\">from</span> network <span class=\"keyword\">import</span> Net</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Predictor</span><span class=\"params\">(OrderedRunner)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_init</span><span class=\"params\">(device, cfg)</span>:</span></span><br><span class=\"line\">        cfg.model = Net()     <span class=\"comment\"># init the producer with a model</span></span><br><span class=\"line\">        cfg.model.to(device)  <span class=\"comment\"># transfer the model to certain device</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_work</span><span class=\"params\">(device, cfg, data)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">            data = torch.Tensor([[data]])  <span class=\"comment\"># preprocess data</span></span><br><span class=\"line\">            data = data.to(device)  <span class=\"comment\"># transfer data to certain device</span></span><br><span class=\"line\">            output = cfg.model(data)  <span class=\"comment\"># predict</span></span><br><span class=\"line\">            output = output.cpu()  <span class=\"comment\"># transfer result to cpu</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_end</span><span class=\"params\">(device, cfg)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> cfg.model  <span class=\"comment\"># delete the model when all data has been predicted.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_init</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">        cfg.data_list = []  <span class=\"comment\"># prepare a list to store all data from producers.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_work</span><span class=\"params\">(cfg, data)</span>:</span></span><br><span class=\"line\">        cfg.data_list.append(data)  <span class=\"comment\"># store data from producers.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_end</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">        data = torch.cat(cfg.data_list, dim=<span class=\"number\">0</span>)  <span class=\"comment\"># postprocess data.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    predictor = Predictor(devices=[<span class=\"string\">\"cuda:0\"</span>, <span class=\"string\">\"cuda:1\"</span>, <span class=\"string\">\"cuda:2\"</span>, <span class=\"string\">\"cuda:3\"</span>])  <span class=\"comment\"># init a parallel predictor</span></span><br><span class=\"line\"></span><br><span class=\"line\">    data_list = list(range(<span class=\"number\">100</span>))  <span class=\"comment\"># prepare data</span></span><br><span class=\"line\">    result = predictor(data_list)  <span class=\"comment\"># predict</span></span><br><span class=\"line\">    print(result.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">    predictor.close()  <span class=\"comment\"># close the predictor when you no longer need it.</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Example-3-批处理数据\">Example 3: 批处理数据<a href=\"easycore-parallel-multi-gpu#Example-3-批处理数据\"></a></h2><p>通过使用一个简单的生成器或者pytorch的dataloader，可以很轻松地生成批数据并通过<code>UnorderedRunner</code>或<code>OrderedRunner</code>进行加速。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> easycore.common.config <span class=\"keyword\">import</span> CfgNode</span><br><span class=\"line\"><span class=\"keyword\">from</span> easycore.torch.parallel <span class=\"keyword\">import</span> OrderedRunner</span><br><span class=\"line\"><span class=\"keyword\">from</span> network <span class=\"keyword\">import</span> Net</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">batch_generator</span><span class=\"params\">(data_list, batch_size)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, len(data_list), batch_size):</span><br><span class=\"line\">        data_batch = data_list[i : i+batch_size]</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> data_batch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Predictor</span><span class=\"params\">(OrderedRunner)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_init</span><span class=\"params\">(device, cfg)</span>:</span></span><br><span class=\"line\">        cfg.model = Net()</span><br><span class=\"line\">        cfg.model.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_work</span><span class=\"params\">(device, cfg, data)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">            data = torch.Tensor(data).view(<span class=\"number\">-1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">            data = data.to(device)</span><br><span class=\"line\">            output = cfg.model(data)</span><br><span class=\"line\">            output = output.cpu()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_end</span><span class=\"params\">(device, cfg)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">del</span> cfg.model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_init</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">        cfg.data_list = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_work</span><span class=\"params\">(cfg, data)</span>:</span></span><br><span class=\"line\">        cfg.data_list.append(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_end</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">        data = torch.cat(cfg.data_list, dim=<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    predictor = Rredictor(devices=[<span class=\"string\">\"cuda:0\"</span>, <span class=\"string\">\"cuda:1\"</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    data_list = list(range(<span class=\"number\">100</span>))</span><br><span class=\"line\">    result = predictor(batch_generator(data_list, batch_size=<span class=\"number\">10</span>))  </span><br><span class=\"line\">    print(result.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">    predictor.close()</span><br></pre></td></tr></table></div></figure>\n\n<p>这里，我们将<code>easycore.common.parallel</code>替换成了<code>easycore.torch.parallel</code>。这两个库有着完全相同的API，区别是<code>easycore.torch.parallel</code>使用了<code>torch.multiprocessing</code>库实现而不是<code>multiprocessing</code>。</p>\n<h2 id=\"Example-4-将Runner外的参数传入Runner中\">Example 4: 将Runner外的参数传入Runner中<a href=\"easycore-parallel-multi-gpu#Example-4-将Runner外的参数传入Runner中\"></a></h2><p>通过<code>cfg</code>参数，你可以很轻松的将任何参数传入自定义的Runner中。<code>cfg</code>是一个<code>easycore.common.config.CfgNode</code>的对象，它的具体使用可以参见教程<a href=\"https://easycore.readthedocs.io/en/latest/tutorials/config.html\" target=\"_blank\" rel=\"noopener\">“Light weight config tools”</a>。</p>\n<p>接下来我们使用“幂之和”作为案例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> easycore.common.config <span class=\"keyword\">import</span> CfgNode <span class=\"keyword\">as</span> CN</span><br><span class=\"line\"><span class=\"keyword\">from</span> easycore.common.parallel <span class=\"keyword\">import</span> UnorderedRunner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span><span class=\"params\">(UnorderedRunner)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">producer_work</span><span class=\"params\">(device, cfg, data)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data ** cfg.exponent  <span class=\"comment\"># calculate power of data with outside parameter \"exponent\".</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_init</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">        cfg.sum = <span class=\"number\">0</span>  <span class=\"comment\"># init a sum variable with 0, you can use cfg to transfer data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_work</span><span class=\"params\">(cfg, data)</span>:</span></span><br><span class=\"line\">        cfg.sum += data  <span class=\"comment\"># add the square to the sum variable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">consumer_end</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cfg.sum  <span class=\"comment\"># return the result you need</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># set parameters outside.</span></span><br><span class=\"line\">    cfg = CN()</span><br><span class=\"line\">    cfg.exponent = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    runner = Runner(devices=<span class=\"number\">3</span>, cfg=cfg)  <span class=\"comment\"># transfer `cfg` into the runner </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    data_list = list(range(<span class=\"number\">100</span>))</span><br><span class=\"line\">    result = runner(data_list)</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"></span><br><span class=\"line\">    runner.close()</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"API-文档\">API 文档<a href=\"easycore-parallel-multi-gpu#API-文档\"></a></h2><ul>\n<li><a href=\"https://easycore.readthedocs.io/en/latest/modules/easycore.common.parallel.html\" target=\"_blank\" rel=\"noopener\">easycore.common.parallel</a></li>\n<li><a href=\"https://easycore.readthedocs.io/en/latest/modules/easycore.torch.parallel.html\" target=\"_blank\" rel=\"noopener\">easycore.torch.parallel</a></li>\n</ul>\n","prev":{"title":"git clone 克隆大项目时发生error RPC failed","link":"git-clone-error-RPC-failed"},"next":{"title":"发布第一个python包到PyPI","link":"publish-first-python-package-to-pypi"},"plink":"https://yuxinzhao.net/easycore-parallel-multi-gpu/","toc":[{"title":"安装easycore","id":"安装easycore","index":"1"},{"title":"多进程加速API","id":"多进程加速API","index":"2"},{"title":"Example 1: 平方和","id":"Example-1-平方和","index":"3"},{"title":"Example 2: 一个神经网络推断器","id":"Example-2-一个神经网络推断器","index":"4"},{"title":"Example 3: 批处理数据","id":"Example-3-批处理数据","index":"5"},{"title":"Example 4: 将Runner外的参数传入Runner中","id":"Example-4-将Runner外的参数传入Runner中","index":"6"},{"title":"API 文档","id":"API-文档","index":"7"}],"reward":true,"copyright":{"author":"Yuxin Zhao","link":"<a href=\"https://yuxinzhao.net/easycore-parallel-multi-gpu/\" title=\"easycore多GPU并行加速\">https://yuxinzhao.net/easycore-parallel-multi-gpu/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}